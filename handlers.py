# handlers.py
import os
import asyncio
import time
from io import BytesIO
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove,  # --- added admin ---
)
from aiogram.filters import CommandStart, StateFilter, Command
# from aiogram.filters import Text  # --- removed, not in aiogram 3.x ---
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State  # --- added admin ---
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.enums import ChatAction

from generators import stream_response_text, solve_from_image
from db import (
    ensure_user, can_use, inc_usage, get_status_text,  # –ª–∏–º–∏—Ç—ã / —Å—Ç–∞—Ç—É—Å
    get_all_chat_ids, drop_chat, set_optin            # --- added admin ---
)

router = Router()

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------
COOLDOWN_SECONDS   = 5
MIN_INTERVAL_SEND  = 1.1
MIN_EDIT_INTERVAL  = 0.25
MAX_TURNS          = 12
MAX_TG_LEN         = 4096

TRIBUTE_LITE_STARTAPP = os.getenv("TRIBUTE_LITE_STARTAPP", "")
TRIBUTE_PRO_STARTAPP  = os.getenv("TRIBUTE_PRO_STARTAPP", "")
TRIBUTE_LITE_PRICE    = os.getenv("TRIBUTE_LITE_PRICE", "200")
TRIBUTE_PRO_PRICE     = os.getenv("TRIBUTE_PRO_PRICE", "300")

def tribute_url(code: str) -> str:
    return f"https://t.me/tribute/app?startapp={code}"

# –ú–µ–Ω—é ¬´–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã¬ª
def plans_kb(show_back: bool = False) -> InlineKeyboardMarkup:
    row = [
        InlineKeyboardButton(text=f"ü™ô LITE {TRIBUTE_LITE_PRICE} ‚ÇΩ", url=tribute_url(TRIBUTE_LITE_STARTAPP)),
        InlineKeyboardButton(text=f"üöÄ PRO {TRIBUTE_PRO_PRICE} ‚ÇΩ",  url=tribute_url(TRIBUTE_PRO_STARTAPP)),
    ]
    kb: list[list[InlineKeyboardButton]] = [row]
    if show_back:
        kb.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subs")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ö–Ω–æ–ø–∫–∞ ¬´–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã¬ª –ø–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–º
def available_btn_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã", callback_data="show_plans")]]
    )

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßæ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton(text="üßπ –°–±—Ä–æ—Å")],
        [KeyboardButton(text="FAQ / –ü–æ–º–æ—â—å")],  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
    ],
    resize_keyboard=True,
    is_persistent=True,
    input_field_placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ‚Ä¶",
)

# ---------- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ ----------
_last_send_ts: Dict[int, float] = {}
_next_allowed_by_chat: Dict[int, float] = {}
HISTORY: Dict[int, List[Dict[str, str]]] = {}  # chat_id -> [{role, content}...]

def _remember(chat_id: int, role: str, content: str):
    hist = HISTORY.setdefault(chat_id, [])
    hist.append({"role": role, "content": content})
    if len(hist) > MAX_TURNS * 2:
        HISTORY[chat_id] = hist[-MAX_TURNS * 2 :]

# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ----------
async def _respect_rate_limit(chat_id: int):
    now = time.monotonic()
    last = _last_send_ts.get(chat_id, 0.0)
    wait = last + MIN_INTERVAL_SEND - now
    if wait > 0:
        await asyncio.sleep(wait)
    _last_send_ts[chat_id] = time.monotonic()

async def safe_send(message: Message, text: str, **kwargs):
    await _respect_rate_limit(message.chat.id)
    try:
        return await message.answer(text, **kwargs)
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after + 1)
        await _respect_rate_limit(message.chat.id)
        return await message.answer(text, **kwargs)
    except TelegramBadRequest as e:
        if "Too Many Requests" in str(e) or "Flood control exceeded" in str(e):
            await asyncio.sleep(2)
            await _respect_rate_limit(message.chat.id)
            return await message.answer(text, **kwargs)
        raise

async def safe_edit(message: Message, message_id: int, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None):
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup
        )
    except TelegramBadRequest as e:
        low = str(e).lower()
        if "message is not modified" in low:
            return
        if "too many requests" in low or "flood control exceeded" in low:
            await asyncio.sleep(1)
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    text=text,
                    reply_markup=reply_markup
                )
            except Exception:
                pass

async def safe_delete(msg):
    try:
        await msg.delete()
    except Exception:
        pass

async def show_cooldown_counter(message: Message, seconds_left: int):
    counter = await safe_send(message, f"üïí –í–∫–ª—é—á–µ–Ω –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–∞–Ω—Ç–∏—Å–ø–∞–º): {seconds_left} —Å–µ–∫")
    try:
        while seconds_left > 0:
            await asyncio.sleep(1)
            seconds_left -= 1
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=counter.message_id,
                    text=f"üïí –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {seconds_left} —Å–µ–∫"
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e).lower():
                    continue
                raise
        await safe_delete(counter)
    except Exception:
        await safe_delete(counter)

async def send_long_text(message: Message, text: str):
    if not text:
        await message.answer("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç üòï", reply_markup=MAIN_KB)
        return
    for i in range(0, len(text), MAX_TG_LEN):
        await message.answer(text[i:i+MAX_TG_LEN], reply_markup=MAIN_KB if i + MAX_TG_LEN >= len(text) else None)

# ---------- –≠–∫—Ä–∞–Ω ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª ----------
async def show_subscriptions(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å. –î–ª—è LITE –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã'. –î–ª—è PRO ‚Äî –±–µ–∑ –∫–Ω–æ–ø–æ–∫.
       –î–ª—è FREE ‚Äî —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ LITE/PRO."""
    text = await get_status_text(message.chat.id)

    # –ì—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å—Ç–∞—Ç—É—Å–∞:
    low = text.lower()
    if "–ø–ª–∞–Ω: free" in low:
        # FREE ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–∞–∫–µ—Ç—ã
        await message.answer(text, reply_markup=plans_kb(show_back=False))
    elif "–ø–ª–∞–Ω: lite" in low:
        # LITE ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–ø–≥—Ä–µ–π–¥
        text2 = text + "\n\n‚¨ÜÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ PRO –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."
        await message.answer(text2, reply_markup=available_btn_kb())
    else:
        # PRO ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å
        await message.answer(text, reply_markup=MAIN_KB)

# ---------- –ö–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ ----------
@router.message(CommandStart())
async def cmd_start(message: Message):
    await ensure_user(message.chat.id)

    greeting = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —à–∫–æ–ª—ã –∏ –≤—É–∑–æ–≤.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –†–∞–∑–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —à–∞–≥–∞–º (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞ –∏ –¥—Ä.)\n"
        "‚Ä¢ –ü–æ—è—Å–Ω—è—Ç—å —Ç–µ–æ—Ä–∏—é –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
        "‚Ä¢ –ü–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏—è, —ç—Å—Å–µ, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∫–æ–¥–æ–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏–π\n"
        "‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞–¥–∞—á üì∑\n\n"
        "–ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "‚Äî –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ.\n"
        "‚Äî –ù—É–∂–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —É—Å–ª–æ–≤–∏—è ‚Äî –∂–º–∏ ¬´FAQ / –ü–æ–º–æ—â—å¬ª.\n"
        "‚Äî –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–∞–∫–µ—Ç—ã ‚Äî ¬´üßæ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª.\n"
    )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(greeting, reply_markup=MAIN_KB)

    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º —ç–∫—Ä–∞–Ω –ø–æ–¥–ø–∏—Å–æ–∫ (–æ–Ω —Å–∞–º —Ä–∞–∑—Ä—É–ª–∏—Ç FREE/LITE/PRO)
    await show_subscriptions(message)


@router.message(Command("plan"))
async def cmd_plan(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:", reply_markup=plans_kb(show_back=True))

@router.message(Command("status"))
async def cmd_status(message: Message):
    await show_subscriptions(message)

@router.message(Command("reset"))
async def cmd_reset(message: Message):
    HISTORY.pop(message.chat.id, None)
    await message.answer("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω", reply_markup=MAIN_KB)

# –ù–∞–∂–∞—Ç–∏—è –ø–æ –Ω–∏–∂–Ω–µ–π Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
@router.message(F.text == "üßæ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def kb_subs(message: Message):
    await show_subscriptions(message)

@router.message(F.text == "üßπ –°–±—Ä–æ—Å")
async def kb_reset(message: Message, state: FSMContext):
    await state.clear()
    await cmd_reset(message)

# ---------- FAQ / –ü–æ–º–æ—â—å ----------
FAQ_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")],
        [KeyboardButton(text="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)

@router.message(F.text == "FAQ / –ü–æ–º–æ—â—å")
async def faq_main(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=FAQ_KB)

@router.message(F.text == "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")
async def faq_how(message: Message):
    await message.answer(
        "üìò –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ ‚Üí –±–æ—Ç –¥–∞—Å—Ç –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä.\n"
        "2) –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º ‚Äî –±–æ—Ç —Ç–æ–∂–µ –ø–æ–Ω–∏–º–∞–µ—Ç.\n"
        "3) –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞."
    )

@router.message(F.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def faq_questions(message: Message):
    await message.answer(
        "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?\n"
        "  –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ, "
        "–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∏–º–µ–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ "
        "—É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–π —É—Å–ª—É–≥–∏.\n\n"
        "‚Ä¢ –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?\n"
        "  –û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–æ—Ç–µ —Å–ø–æ—Å–æ–±—ã.\n\n"
        "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?\n"
        "  –ü–æ–º–æ–≥–∞–µ—Ç —Å —Ä–∞–∑–±–æ—Ä–æ–º —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –ø–æ —à–∞–≥–∞–º, –Ω–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."
    )

@router.message(F.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
async def faq_offer(message: Message):
    offer_text = (
        "üìë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n\n"
        "1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n"
        "1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äì ¬´–°–æ–≥–ª–∞—à–µ–Ω–∏–µ¬ª) —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram-–±–æ—Ç–∞ ¬´–£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫¬ª (–¥–∞–ª–µ–µ ‚Äì ¬´–ë–æ—Ç¬ª).\n"
        "1.2. –ò—Å–ø–æ–ª—å–∑—É—è –ë–æ—Ç, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.\n"
        "1.3. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ–º.\n\n"
        "2. –£—Å–ª—É–≥–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ë–æ—Ç–∞\n"
        "2.1. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ä–µ—à–µ–Ω–∏–π.\n"
        "2.2. –î–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.\n"
        "2.3. –û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ.\n\n"
        "3. –û–ø–ª–∞—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã\n"
        "3.1. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –ë–æ—Ç–µ.\n"
        "3.2. –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ, –∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∏–º–µ–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–π —É—Å–ª—É–≥–∏.\n"
        "3.3. –í —Å–ª—É—á–∞–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —É—Å–ª—É–≥–∞ –Ω–µ –±—ã–ª–∞ –æ–∫–∞–∑–∞–Ω–∞, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø—Ä–∞–≤–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
        "4. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω\n"
        "4.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–æ—Ç –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.\n"
        "4.2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞:\n"
        "   ‚Äì –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º;\n"
        "   ‚Äì –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–±–æ–∏ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ç.–ø.).\n"
        "4.3. –í—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ª–µ–∂–∏—Ç –Ω–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n\n"
        "5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "5.1. –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: Telegram ID, username –∏ –∏–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å–∞–º–∏–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
        "5.2. –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É—á–∞–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.\n\n"
        "6. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
        "6.1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –∏–∑–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ë–æ—Ç–∞, –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É.\n"
        "6.2. –û–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ë–æ—Ç–∞.\n\n"
        "7. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n"
        "7.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–æ—Ç–∞.\n"
        "7.2. –í—Å–µ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º, —Ä–µ—à–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.\n"
        "7.3. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π: @gptEDU_support"
    )
    # –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∫—É—Å–∫–∞–º–∏
    if len(offer_text) > MAX_TG_LEN:
        await send_long_text(message, offer_text)
    else:
        await message.answer(offer_text)

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def faq_back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_KB)

# ---------- Admin panel: –≤—Ö–æ–¥ –ø–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–¥—É, —Ä–∞—Å—Å—ã–ª–∫–∏ ----------

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–¥–º–∏–Ω–æ–≤ (–¥–æ 2-—Ö), –¥–æ—Å—Ç—É–ø –ø–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–¥—É –∏–∑ .env
import json
from pathlib import Path

SECRET_ADMIN_CODES = {c.strip() for c in os.getenv("SECRET_ADMIN_CODES", "").split(",") if c.strip()}
ADMINS_FILE = Path("admins.json")
MAX_ADMINS = 2
ADMINS: set[int] = set()

def _load_admins():
    global ADMINS
    if ADMINS_FILE.exists():
        try:
            data = json.loads(ADMINS_FILE.read_text(encoding="utf-8"))
            if isinstance(data, list):
                ADMINS = set(int(x) for x in data)
        except Exception:
            ADMINS = set()

def _save_admins():
    try:
        ADMINS_FILE.write_text(json.dumps(sorted(list(ADMINS))), encoding="utf-8")
    except Exception:
        pass

_load_admins()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

ADMIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî —Ç–µ–∫—Å—Ç"), KeyboardButton(text="üñºÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üìä –ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"), KeyboardButton(text="‚è™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞")],
    ],
    resize_keyboard=True,
)

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –≤—Ö–æ–¥ (—Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º —Ä–∞–≤–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–¥—É)
@router.message(lambda m: (m.text or "").strip() in SECRET_ADMIN_CODES)
async def secret_code_grant(message: Message):
    uid = message.from_user.id
    if is_admin(uid):
        return await message.answer("–í—ã —É–∂–µ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ.", reply_markup=ADMIN_KB)

    if len(ADMINS) >= MAX_ADMINS:
        return await message.answer("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç (2 –∞–¥–º–∏–Ω–∞).", reply_markup=MAIN_KB)

    ADMINS.add(uid)
    _save_admins()
    await message.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=ADMIN_KB)

# –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
@router.message(Command("admin"))
async def cmd_admin_open(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ADMIN_KB)

# –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞
@router.message(F.text == "‚è™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞")
async def admin_logout(message: Message):
    uid = message.from_user.id
    if is_admin(uid):
        ADMINS.discard(uid)
        _save_admins()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞.", reply_markup=MAIN_KB)
    else:
        await message.answer("–í—ã –Ω–µ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ.", reply_markup=MAIN_KB)

# –ü–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫)
@router.message(Command("unsubscribe"))
async def cmd_unsub(message: Message):
    await set_optin(message.chat.id, False)
    await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫. –í–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞: /subscribe")

@router.message(Command("subscribe"))
async def cmd_sub(message: Message):
    await set_optin(message.chat.id, True)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–∫–ª—é—á–∏—Ç—å: /unsubscribe")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
class AdminBroadcastStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()
    waiting_for_caption = State()
    confirm = State()  # --- admin confirm/progress ---

BROADCAST_CONCURRENCY = 20
BROADCAST_DELAY_SEC   = 0.03

def _progress_bar(pct: float, width: int = 12) -> str:
    """–í–µ—Ä–Ω—ë—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤–∏–¥–∞ [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà----] 50%"""
    done = int(round(pct * width))
    return f"[{'‚ñà'*done}{'‚Äî'*(width-done)}] {int(pct*100)}%"

def _confirm_kb(kind: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: kind='text'|'photo'"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"bcast_confirm_{kind}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",    callback_data="bcast_cancel"),
    ]])

# ---------- –†–ê–°–°–´–õ–ö–ê –¢–ï–ö–°–¢–û–ú (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º) ----------
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî —Ç–µ–∫—Å—Ç")
async def admin_broadcast_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await state.set_state(AdminBroadcastStates.waiting_for_text)
    await message.answer("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ /cancel):", reply_markup=ReplyKeyboardRemove())

@router.message(AdminBroadcastStates.waiting_for_text)
async def admin_broadcast_receive_text(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await state.clear()
        return

    text = (message.text or "").strip()
    if not text:
        await message.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–º–µ–Ω–∞.", reply_markup=ADMIN_KB)
        await state.clear()
        return

    # –ü–æ—Å—á–∏—Ç–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Å–ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    chat_ids = await get_all_chat_ids(optin_only=True)
    await state.update_data(kind="text", text=text, audience=chat_ids)
    await state.set_state(AdminBroadcastStates.confirm)
    await message.answer(
        f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ *—Ç–µ–∫—Å—Ç–æ–≤–æ–µ* —Å–æ–æ–±—â–µ–Ω–∏–µ {len(chat_ids)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
        reply_markup=_confirm_kb("text"),
        parse_mode="Markdown"
    )

# ---------- –†–ê–°–°–´–õ–ö–ê –§–û–¢–û (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º) ----------
@router.message(F.text == "üñºÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî —Ñ–æ—Ç–æ")
async def admin_broadcast_photo_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await state.set_state(AdminBroadcastStates.waiting_for_photo)
    await message.answer("üñºÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (—Ñ–∞–π–ª/URL/file_id) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∏–ª–∏ /cancel:", reply_markup=ReplyKeyboardRemove())

@router.message(AdminBroadcastStates.waiting_for_photo)
async def admin_broadcast_photo_received(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await state.clear()
        return

    photo_file_id = None
    if message.photo:
        photo_file_id = message.photo[-1].file_id
    else:
        txt = (message.text or "").strip()
        if txt:
            photo_file_id = txt  # URL –∏–ª–∏ file_id

    if not photo_file_id:
        await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Ñ–æ—Ç–æ/URL. –û—Ç–º–µ–Ω–∞.", reply_markup=ADMIN_KB)
        await state.clear()
        return

    # –°–ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å—å
    await state.update_data(photo_file_id=photo_file_id)
    await state.set_state(AdminBroadcastStates.waiting_for_caption)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å (–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):", reply_markup=ReplyKeyboardRemove())

@router.message(AdminBroadcastStates.waiting_for_caption)
async def admin_broadcast_photo_caption(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await state.clear()
        return
    data = await state.get_data()
    photo_file_id = data.get("photo_file_id")
    caption = (message.text or "").strip() or None

    # –ü–æ—Å—á–∏—Ç–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Å–ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    chat_ids = await get_all_chat_ids(optin_only=True)
    await state.update_data(kind="photo", photo_file_id=photo_file_id, caption=caption, audience=chat_ids)
    await state.set_state(AdminBroadcastStates.confirm)
    await message.answer(
        f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ *—Ñ–æ—Ç–æ* {len(chat_ids)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
        reply_markup=_confirm_kb("photo"),
        parse_mode="Markdown"
    )

# ---------- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ / –û—Ç–º–µ–Ω–∞ ----------
@router.callback_query(F.data == "bcast_cancel")
async def bcast_cancel(call: CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await state.clear()
    await call.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=ADMIN_KB)
    await call.answer()

@router.callback_query(F.data == "bcast_confirm_text")
async def bcast_confirm_text(call: CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    data = await state.get_data()
    if data.get("kind") != "text":
        return await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)

    text: str = data["text"]
    chat_ids: List[int] = data["audience"]
    await state.clear()

    # –°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    total = len(chat_ids)
    sent = 0
    failed = 0
    status_msg = await call.message.edit_text(f"üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç)\n{_progress_bar(0)}\n0 / {total}")
    lock = asyncio.Lock()

    sem = asyncio.Semaphore(BROADCAST_CONCURRENCY)
    last_edit_ts = time.monotonic()

    async def worker(cid: int):
        nonlocal sent, failed, last_edit_ts
        async with sem:
            try:
                await call.message.bot.send_message(cid, text)
                sent += 1
            except Exception:
                try:
                    await drop_chat(cid)
                except Exception:
                    pass
                failed += 1
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 0.5 —Å–µ–∫
            now_ts = time.monotonic()
            if now_ts - last_edit_ts >= 0.5:
                async with lock:
                    last_edit_ts = time.monotonic()
                    pct = (sent + failed) / total if total else 1.0
                    try:
                        await call.message.bot.edit_message_text(
                            chat_id=status_msg.chat.id,
                            message_id=status_msg.message_id,
                            text=f"üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç)\n{_progress_bar(pct)}\n{sent+failed} / {total}"
                        )
                    except TelegramBadRequest:
                        pass
            await asyncio.sleep(BROADCAST_DELAY_SEC)

    await asyncio.gather(*(worker(cid) for cid in chat_ids))

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    try:
        await call.message.bot.edit_message_text(
            chat_id=status_msg.chat.id,
            message_id=status_msg.message_id,
            text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í—Å–µ–≥–æ: {total}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫/–æ—á–∏—â–µ–Ω–æ: {failed}"
        )
    except TelegramBadRequest:
        await call.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í—Å–µ–≥–æ: {total}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫/–æ—á–∏—â–µ–Ω–æ: {failed}")
    await call.message.answer("–ì–æ—Ç–æ–≤–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=ADMIN_KB)
    await call.answer()

@router.callback_query(F.data == "bcast_confirm_photo")
async def bcast_confirm_photo(call: CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    data = await state.get_data()
    if data.get("kind") != "photo":
        return await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)

    photo_file_id: str = data["photo_file_id"]
    caption: Optional[str] = data.get("caption")
    chat_ids: List[int] = data["audience"]
    await state.clear()

    total = len(chat_ids)
    sent = 0
    failed = 0
    status_msg = await call.message.edit_text(f"üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ñ–æ—Ç–æ)\n{_progress_bar(0)}\n0 / {total}")
    lock = asyncio.Lock()

    sem = asyncio.Semaphore(BROADCAST_CONCURRENCY)
    last_edit_ts = time.monotonic()

    async def worker(cid: int):
        nonlocal sent, failed, last_edit_ts
        async with sem:
            try:
                await call.message.bot.send_photo(cid, photo=photo_file_id, caption=caption)
                sent += 1
            except Exception:
                try:
                    await drop_chat(cid)
                except Exception:
                    pass
                failed += 1
            now_ts = time.monotonic()
            if now_ts - last_edit_ts >= 0.5:
                async with lock:
                    last_edit_ts = time.monotonic()
                    pct = (sent + failed) / total if total else 1.0
                    try:
                        await call.message.bot.edit_message_text(
                            chat_id=status_msg.chat.id,
                            message_id=status_msg.message_id,
                            text=f"üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ñ–æ—Ç–æ)\n{_progress_bar(pct)}\n{sent+failed} / {total}"
                        )
                    except TelegramBadRequest:
                        pass
            await asyncio.sleep(BROADCAST_DELAY_SEC)

    await asyncio.gather(*(worker(cid) for cid in chat_ids))

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    try:
        await call.message.bot.edit_message_text(
            chat_id=status_msg.chat.id,
            message_id=status_msg.message_id,
            text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ (—Ñ–æ—Ç–æ) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í—Å–µ–≥–æ: {total}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫/–æ—á–∏—â–µ–Ω–æ: {failed}"
        )
    except TelegramBadRequest:
        await call.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ (—Ñ–æ—Ç–æ) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í—Å–µ–≥–æ: {total}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫/–æ—á–∏—â–µ–Ω–æ: {failed}")
    await call.message.answer("–ì–æ—Ç–æ–≤–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=ADMIN_KB)
    await call.answer()

@router.message(F.text == "üìä –ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
async def admin_count(message: Message):
    if not is_admin(message.from_user.id):
        return
    chat_ids = await get_all_chat_ids(optin_only=True)
    await message.answer(f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (optin=True): {len(chat_ids)}", reply_markup=ADMIN_KB)

@router.message(Command("cancel"))
async def admin_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ADMIN_KB if is_admin(message.from_user.id) else MAIN_KB)

# ---------- Callback-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–º ----------
@router.callback_query(F.data == "show_plans")
async def cb_show_plans(call: CallbackQuery):
    await call.message.edit_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:", reply_markup=plans_kb(show_back=True))
    await call.answer()

@router.callback_query(F.data == "back_to_subs")
async def cb_back_to_subs(call: CallbackQuery):
    # –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    text = await get_status_text(call.message.chat.id)
    kb: Optional[InlineKeyboardMarkup] = None
    low = text.lower()
    if "–ø–ª–∞–Ω: lite" in low:
        text += "\n\n‚¨ÜÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ PRO –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."
        kb = available_btn_kb()
    await call.message.edit_text(text, reply_markup=kb)
    await call.answer()

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ----------
@router.message(StateFilter('generating'))
async def wait_response(message: Message):
    await safe_send(message, "‚è≥ –û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!")

# –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
@router.message(F.text & ~F.text.startswith("/"))
async def generate_answer(message: Message, state: FSMContext):
    chat_id = message.chat.id
    user_text = (message.text or "").strip()
    if not user_text:
        return

    # –∞–Ω—Ç–∏—Å–ø–∞–º
    now = time.monotonic()
    next_allowed = _next_allowed_by_chat.get(chat_id, 0.0)
    if now < next_allowed:
        seconds_left = int(next_allowed - now + 0.999)
        asyncio.create_task(show_cooldown_counter(message, seconds_left))
        return
    _next_allowed_by_chat[chat_id] = now + COOLDOWN_SECONDS

    # —É—á—ë—Ç –ª–∏–º–∏—Ç–æ–≤
    await ensure_user(chat_id)
    allowed, msg = await can_use(await ensure_user(chat_id), "text")
    if not allowed:
        await message.answer(msg, reply_markup=plans_kb(show_back=True))
        return

    await state.set_state("generating")
    await message.bot.send_chat_action(chat_id, ChatAction.TYPING)
    draft = await safe_send(message, "–î—É–º–∞—é‚Ä¶")

    typing_alive = True
    async def typing_loop():
        while typing_alive:
            try:
                await message.bot.send_chat_action(chat_id, ChatAction.TYPING)
            except Exception:
                pass
            await asyncio.sleep(4)
    typing_task = asyncio.create_task(typing_loop())

    accumulated = ""
    last_edit = 0.0

    try:
        history = HISTORY.get(chat_id, [])
        async for delta in stream_response_text(user_text, history):
            accumulated += delta
            t = asyncio.get_event_loop().time()
            if t - last_edit >= MIN_EDIT_INTERVAL:
                await safe_edit(message, draft.message_id, accumulated or "‚Ä¶")
                last_edit = t

        if accumulated:
            if len(accumulated) > MAX_TG_LEN:
                await safe_delete(draft)
                await send_long_text(message, accumulated)
            else:
                await safe_edit(message, draft.message_id, accumulated)
        else:
            await safe_edit(message, draft.message_id, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç üòï")

        _remember(chat_id, "user", user_text)
        _remember(chat_id, "assistant", accumulated or "")
        await inc_usage(chat_id, "text")

    except Exception as e:
        await safe_edit(message, draft.message_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        typing_alive = False
        typing_task.cancel()
        await state.clear()

# ---------- –§–æ—Ç–æ-–∑–∞–¥–∞—á–∏ ----------
@router.message(F.photo)
async def on_photo(message: Message, state: FSMContext):
    chat_id = message.chat.id

    now = time.monotonic()
    next_allowed = _next_allowed_by_chat.get(chat_id, 0.0)
    if now < next_allowed:
        seconds_left = int(next_allowed - now + 0.999)
        asyncio.create_task(show_cooldown_counter(message, seconds_left))
        return
    _next_allowed_by_chat[chat_id] = now + COOLDOWN_SECONDS

    await ensure_user(chat_id)
    allowed, msg = await can_use(await ensure_user(chat_id), "photo")
    if not allowed:
        await message.answer(msg, reply_markup=plans_kb(show_back=True))
        return

    await state.set_state("generating")
    await message.bot.send_chat_action(chat_id, ChatAction.TYPING)
    draft = await safe_send(message, "–†–∞—Å–ø–æ–∑–Ω–∞—é –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ‚Ä¶")

    try:
        largest = message.photo[-1]
        file = await message.bot.get_file(largest.file_id)
        buf = BytesIO()
        await message.bot.download_file(file.file_path, buf)
        image_bytes = buf.getvalue()

        answer = await solve_from_image(
            image_bytes,
            hint="–†–∞—Å–ø–æ–∑–Ω–∞–π —É—Å–ª–æ–≤–∏–µ –∏ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É. –ü–æ–∫–∞–∂–∏ —Ñ–æ—Ä–º—É–ª—ã, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –∏—Ç–æ–≥.",
            history=HISTORY.get(chat_id, [])
        )

        if answer and len(answer) > MAX_TG_LEN:
            await safe_delete(draft)
            await send_long_text(message, answer)
        else:
            await safe_edit(message, draft.message_id, answer or "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á—É.")

        _remember(chat_id, "user", "[–§–æ—Ç–æ –∑–∞–¥–∞—á–∏]")
        _remember(chat_id, "assistant", answer or "")
        await inc_usage(chat_id, "photo")

    except Exception as e:
        await safe_edit(message, draft.message_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ —Ñ–æ—Ç–æ: {e}")

    finally:
        await state.clear()
