# handlers.py
import os
import asyncio
import time
from io import BytesIO
from typing import Dict, List, Optional, Tuple
from urllib.parse import quote_plus

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove,
    BufferedInputFile,
    InputMediaPhoto,
)
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.enums import ChatAction, ParseMode

from generators import stream_response_text, solve_from_image, quiz_from_answer
from db import (
    ensure_user, can_use, inc_usage, get_status_text,
    get_all_chat_ids, drop_chat, set_optin,
    # prefs / voice
    get_prefs, get_pref_bool, set_pref,
    get_voice_settings, set_voice_settings,
    is_teacher_mode, set_teacher_mode,
    get_priority, set_priority,
    get_answer_style, set_answer_style,
    # history & bookmarks
    add_history, get_history, clear_history,
    remember_bookmark, forget_last_bookmark, get_last_bookmark,
    # —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
    get_or_create_ref_code, get_referral_stats,
    find_user_by_ref_code, set_referrer_once,
)

from utils_export import pdf_from_answer_text
from tts import tts_voice_ogg, split_for_tts

router = Router()

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------
COOLDOWN_SECONDS   = 5
MIN_INTERVAL_SEND  = 1.1
MIN_EDIT_INTERVAL  = 0.25
MAX_TG_LEN         = 4096

TRIBUTE_LITE_STARTAPP = os.getenv("TRIBUTE_LITE_STARTAPP", "")
TRIBUTE_PRO_STARTAPP  = os.getenv("TRIBUTE_PRO_STARTAPP", "")
TRIBUTE_LITE_PRICE    = os.getenv("TRIBUTE_LITE_PRICE", "200")
TRIBUTE_PRO_PRICE     = os.getenv("TRIBUTE_PRO_PRICE", "300")

# –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
BOT_USERNAME          = os.getenv("BOT_USERNAME", "your_bot").lstrip("@")  # –±–µ–∑ @
REF_BONUS_THRESHOLD   = int(os.getenv("REF_BONUS_THRESHOLD", "6"))         # –∫–∞–∂–¥—ã–µ N –æ–ø–ª–∞—Ç = +1 –º–µ—Å—è—Ü PRO

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã TTS
TTS_ENABLED_DEFAULT_PRO = True
TTS_CHUNK_LIMIT = 2500

def tribute_url(code: str) -> str:
    return f"https://t.me/tribute/app?startapp={code}"

# ---------- –ü–ª–∞–Ω/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
async def _plan_flags(chat_id: int) -> Tuple[bool, bool, bool]:
    """return (is_free, is_lite, is_pro)"""
    t = (await get_status_text(chat_id)).lower()
    return ("–ø–ª–∞–Ω: free" in t, "–ø–ª–∞–Ω: lite" in t, "–ø–ª–∞–Ω: pro" in t)

def plans_kb(show_back: bool = False) -> InlineKeyboardMarkup:
    row = [
        InlineKeyboardButton(text=f"ü™ô LITE {TRIBUTE_LITE_PRICE} ‚ÇΩ", url=tribute_url(TRIBUTE_LITE_STARTAPP)),
        InlineKeyboardButton(text=f"üöÄ PRO {TRIBUTE_PRO_PRICE} ‚ÇΩ",  url=tribute_url(TRIBUTE_PRO_STARTAPP)),
    ]
    kb: list[list[InlineKeyboardButton]] = [row]
    if show_back:
        kb.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subs")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def available_btn_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã", callback_data="show_plans")]]
    )

def answer_actions_kb(is_pro: bool) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = [[]]
    if is_pro:
        rows[0].append(InlineKeyboardButton(text="üéô –û–∑–≤—É—á–∏—Ç—å", callback_data="tts_say"))
        rows[0].append(InlineKeyboardButton(text="üìÑ PDF", callback_data="export_pdf"))
        rows[0].append(InlineKeyboardButton(text="üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è", callback_data="quiz_make"))
    else:
        rows[0].append(InlineKeyboardButton(text="üîí PDF (PRO)", callback_data="need_pro_pdf"))
        rows[0].append(InlineKeyboardButton(text="üîí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è (PRO)", callback_data="need_pro_quiz"))
    return InlineKeyboardMarkup(inline_keyboard=rows)

def main_kb_for_plan(is_free: bool) -> ReplyKeyboardMarkup:
    if is_free:
        keyboard = [
            [KeyboardButton(text="üîº –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω"), KeyboardButton(text="FAQ / –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),     KeyboardButton(text="üéÅ –ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–∑–µ–π")],
        ]
    else:
        keyboard = [
            [KeyboardButton(text="üßæ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),  KeyboardButton(text="FAQ / –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),     KeyboardButton(text="üéÅ –ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–∑–µ–π")],
        ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        is_persistent=True,
        input_field_placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ‚Ä¶",
    )

SETTINGS_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫—É"), KeyboardButton(text="üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫—É")],
        [KeyboardButton(text="üë©‚Äçüè´ –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è"), KeyboardButton(text="üë®‚Äçüéì –í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è")],
        [KeyboardButton(text="üßπ –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")],
        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

# ---------- –†–µ–π—Ç–∫–æ–Ω—Ç—Ä–æ–ª—å ----------
_last_send_ts: Dict[int, float] = {}
_next_allowed_by_chat: Dict[int, float] = {}

# ------------- helpers -------------
async def _is_pro(chat_id: int) -> bool:
    _, _, pro = await _plan_flags(chat_id)
    return pro

async def _is_free(chat_id: int) -> bool:
    free, _, _ = await _plan_flags(chat_id)
    return free

async def _last_assistant_text(chat_id: int) -> Optional[str]:
    hist = await get_history(chat_id)
    for item in reversed(hist):
        if item.get("role") == "assistant":
            return item.get("content") or ""
    return None

def _ref_link_from_code(code: str) -> str:
    return f"https://t.me/{BOT_USERNAME}?start=ref_{code}"

def _share_button(link: str, caption: str) -> InlineKeyboardButton:
    share_url = f"https://t.me/share/url?url={quote_plus(link)}&text={quote_plus(caption)}"
    return InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_url)

async def _send_referral_card(message: Message):
    stats = await get_referral_stats(message.chat.id)
    code  = stats.get("ref_code") or await get_or_create_ref_code(message.chat.id)
    link  = _ref_link_from_code(code)
    paid  = int(stats.get("referred_paid_count") or 0)
    total = int(stats.get("referred_count") or 0)
    left  = max(0, REF_BONUS_THRESHOLD - (paid % REF_BONUS_THRESHOLD))
    progress = paid % REF_BONUS_THRESHOLD
    meter = "‚ñà"*progress + "‚Äî"*(REF_BONUS_THRESHOLD-progress)

    text = (
        "üéÅ <b>–ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–∑–µ–π</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n"
        f"–ó–∞ –∫–∞–∂–¥—ã–µ <b>{REF_BONUS_THRESHOLD}</b> –ø–æ–∫—É–ø–æ–∫ (LITE/PRO) –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ ‚Äî <b>+1 –º–µ—Å—è—Ü PRO</b>.\n\n"
        f"üîó <b>–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{link}</code>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"‚Äî –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{total}</b>\n"
        f"‚Äî –ö—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: <b>{paid}</b>\n"
        f"‚Äî –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –ø–æ–¥–∞—Ä–∫–∞: [{meter}] {progress}/{REF_BONUS_THRESHOLD}\n"
        f"‚Äî –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞: <b>{left}</b>\n\n"
        "–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π —Å –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º–∏, –≤ —á–∞—Ç–∞—Ö –∫—É—Ä—Å–∞ –∏–ª–∏ –¥—Ä—É–∑—å—è–º üëá"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=link),
        _share_button(link, "–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á—ë–±—ã ‚Äî –º–æ—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:")
    ]])
    await message.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)

# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ----------
async def _respect_rate_limit(chat_id: int):
    now = time.monotonic()
    last = _last_send_ts.get(chat_id, 0.0)
    wait = last + MIN_INTERVAL_SEND - now
    if wait > 0:
        await asyncio.sleep(wait)
    _last_send_ts[chat_id] = time.monotonic()

async def safe_send(message: Message, text: str, **kwargs):
    await _respect_rate_limit(message.chat.id)
    try:
        return await message.answer(text, **kwargs)
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after + 1)
        await _respect_rate_limit(message.chat.id)
        return await message.answer(text, **kwargs)
    except TelegramBadRequest as e:
        if "too many requests" in str(e).lower() or "flood control exceeded" in str(e).lower():
            await asyncio.sleep(2)
            await _respect_rate_limit(message.chat.id)
            return await message.answer(text, **kwargs)
        raise

async def safe_edit(message: Message, message_id: int, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None):
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup
        )
    except TelegramBadRequest as e:
        low = str(e).lower()
        if "message is not modified" in low:
            return
        if "too many requests" in low or "flood control exceeded" in low:
            await asyncio.sleep(1)
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    text=text,
                    reply_markup=reply_markup
                )
            except Exception:
                pass

async def safe_delete(msg):
    try:
        await msg.delete()
    except Exception:
        pass

async def show_cooldown_counter(message: Message, seconds_left: int):
    counter = await safe_send(message, f"üïí –í–∫–ª—é—á–µ–Ω –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–∞–Ω—Ç–∏—Å–ø–∞–º): {seconds_left} —Å–µ–∫")
    try:
        while seconds_left > 0:
            await asyncio.sleep(1)
            seconds_left -= 1
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=counter.message_id,
                    text=f"üïí –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {seconds_left} —Å–µ–∫"
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e).lower():
                    continue
                raise
        await safe_delete(counter)
    except Exception:
        await safe_delete(counter)

async def send_long_text(message: Message, text: str):
    if not text:
        await message.answer("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç üòï", reply_markup=main_kb_for_plan(await _is_free(message.chat.id)))
        return
    for i in range(0, len(text), MAX_TG_LEN):
        await message.answer(
            text[i:i+MAX_TG_LEN],
            reply_markup=main_kb_for_plan(await _is_free(message.chat.id)) if i + MAX_TG_LEN >= len(text) else None
        )

# ---------- –≠–∫—Ä–∞–Ω ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª ----------
async def show_subscriptions(message: Message):
    text = await get_status_text(message.chat.id)
    low = text.lower()
    if "–ø–ª–∞–Ω: free" in low:
        await message.answer(text, reply_markup=available_btn_kb())
    elif "–ø–ª–∞–Ω: lite" in low:
        text2 = text + "\n\n‚¨ÜÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ PRO –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."
        await message.answer(text2, reply_markup=available_btn_kb())
    else:
        await message.answer(text)

# ---------- –ö–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ ----------
@router.message(CommandStart())
async def cmd_start(message: Message):
    await ensure_user(message.chat.id)

    # deep-link: /start ref_xxxxxx
    payload = None
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) > 1:
        payload = parts[1].strip()
    if payload and payload.startswith("ref_"):
        code = payload[4:]
        ref_id = await find_user_by_ref_code(code)
        if ref_id:
            await set_referrer_once(message.chat.id, ref_id)

    # –∞–≤—Ç–æ-–≤–∫–ª—é—á–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ –¥–ª—è PRO
    if TTS_ENABLED_DEFAULT_PRO and await _is_pro(message.chat.id):
        vs = await get_voice_settings(message.chat.id)
        if not vs.get("auto"):
            await set_voice_settings(message.chat.id, auto=True)

    is_free = await _is_free(message.chat.id)
    kb = main_kb_for_plan(is_free)

    greeting = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —à–∫–æ–ª—ã –∏ –≤—É–∑–æ–≤.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –†–∞–∑–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —à–∞–≥–∞–º (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞ –∏ –¥—Ä.)\n"
        "‚Ä¢ –ü–æ—è—Å–Ω—è—Ç—å —Ç–µ–æ—Ä–∏—é –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
        "‚Ä¢ –ü–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏—è, —ç—Å—Å–µ, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∫–æ–¥–æ–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏–π\n"
        "‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞–¥–∞—á üì∑\n\n"
        "–ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "‚Äî –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ.\n"
        "‚Äî –ù—É–∂–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ ‚Äî –∂–º–∏ ¬´FAQ / –ü–æ–º–æ—â—å¬ª.\n"
        f"‚Äî { '–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ.' if is_free else '–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ ‚Äî ¬´üßæ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª.' }\n"
        "‚Äî üéÅ –ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–∑–µ–π: –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π PRO."
    )
    await message.answer(greeting, reply_markup=kb)

@router.message(F.text == "üéÅ –ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–∑–µ–π")
async def kb_referral(message: Message):
    await _send_referral_card(message)

@router.message(Command("ref"))
async def cmd_ref(message: Message):
    await _send_referral_card(message)

@router.message(F.text == "üßæ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def kb_subscriptions(message: Message):
    await show_subscriptions(message)

@router.message(F.text == "üîº –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω")
async def kb_upgrade(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=plans_kb(show_back=False))

@router.message(Command("plan"))
async def cmd_plan(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:", reply_markup=plans_kb(show_back=True))

@router.message(Command("status"))
async def cmd_status(message: Message):
    await show_subscriptions(message)

@router.message(Command("reset"))
async def cmd_reset(message: Message):
    await clear_history(message.chat.id)
    await message.answer("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω", reply_markup=main_kb_for_plan(await _is_free(message.chat.id)))

# ===== –†–∞–∑–¥–µ–ª ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª =====
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def open_settings(message: Message):
    _, is_lite, is_pro = await _plan_flags(message.chat.id)
    extra = "" if is_pro else "\n\n‚ÑπÔ∏è –£—á–∏—Ç–µ–ª—å, –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞, PDF –∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç ‚Äî –≤ PRO."
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n‚Äî –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞\n‚Äî —Ä–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è\n‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" + extra,
        reply_markup=SETTINGS_KB
    )

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_from_settings(message: Message):
    await message.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=main_kb_for_plan(await _is_free(message.chat.id)))

@router.message(F.text == "üßπ –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
async def settings_reset_ctx(message: Message):
    await cmd_reset(message)

@router.message(F.text == "üë©‚Äçüè´ –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è")
async def settings_teacher_on(message: Message):
    if not await _is_pro(message.chat.id):
        return await message.answer("üë©‚Äçüè´ –†–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ PRO.", reply_markup=available_btn_kb())
    await set_teacher_mode(message.chat.id, True)
    await message.answer("üë©‚Äçüè´ –†–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è: –í–ö–õ.")

@router.message(F.text == "üë®‚Äçüéì –í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è")
async def settings_teacher_off(message: Message):
    await set_teacher_mode(message.chat.id, False)
    await message.answer("üë©‚Äçüè´ –†–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è: –í–´–ö–õ.")

@router.message(F.text == "üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫—É")
async def settings_voice_on(message: Message):
    if not await _is_pro(message.chat.id):
        return await message.answer("üéô –ê–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO.", reply_markup=available_btn_kb())
    await set_voice_settings(message.chat.id, auto=True)
    await message.answer("üîî –ê–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞: –í–ö–õ.")

@router.message(F.text == "üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫—É")
async def settings_voice_off(message: Message):
    await set_voice_settings(message.chat.id, auto=False)
    await message.answer("üîï –ê–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞: –í–´–ö–õ.")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–æ–ª–æ—Å–∞ (–≤–Ω–µ –º–µ–Ω—é)
@router.message(Command("voice_on"))
async def cmd_voice_on(message: Message):
    if not await _is_pro(message.chat.id):
        return await message.answer("üéô –û–∑–≤—É—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω: /plan")
    await set_voice_settings(message.chat.id, auto=True)
    await message.answer("üéô –û–∑–≤—É—á–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤: –í–ö–õ. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å voice –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞.")

@router.message(Command("voice_off"))
async def cmd_voice_off(message: Message):
    await set_voice_settings(message.chat.id, auto=False)
    await message.answer("üéô –û–∑–≤—É—á–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤: –í–´–ö–õ. –ö–Ω–æ–ø–∫–∞ ¬´–û–∑–≤—É—á–∏—Ç—å¬ª –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ–¥ –æ—Ç–≤–µ—Ç–∞–º–∏.")

@router.message(Command("voice"))
async def cmd_voice_name(message: Message):
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("–ü—Ä–∏–º–µ—Ä: /voice aria")
    await set_voice_settings(message.chat.id, name=parts[1].strip())
    await message.answer(f"üéô –ì–æ–ª–æ—Å: {parts[1].strip()}")

@router.message(Command("voice_speed"))
async def cmd_voice_speed(message: Message):
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("–ü—Ä–∏–º–µ—Ä: /voice_speed 0.9 (–¥–∏–∞–ø–∞–∑–æ–Ω 0.5‚Äì1.6)")
    try:
        v = float(parts[1].strip())
    except Exception:
        return await message.answer("–£–∫–∞–∂–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1.1")
    await set_voice_settings(message.chat.id, speed=v)
    await message.answer(f"üéõ –°–∫–æ—Ä–æ—Å—Ç—å –æ–∑–≤—É—á–∫–∏: {max(0.5, min(1.6, v)):.2f}")

# –ó–∞–∫–ª–∞–¥–∫–∏
@router.message(Command("remember"))
async def cmd_remember(message: Message):
    last = await _last_assistant_text(message.chat.id)
    if not last:
        return await message.answer("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏.")
    await remember_bookmark(message.chat.id, last)
    await message.answer("üîñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏. –î–æ—Å—Ç–∞–Ω–µ—à—å —á–µ—Ä–µ–∑ /bookmark –∏–ª–∏ /forget –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

@router.message(Command("bookmark"))
async def cmd_bookmark(message: Message):
    bk = await get_last_bookmark(message.chat.id)
    if not bk:
        return await message.answer("–ó–∞–∫–ª–∞–¥–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    await send_long_text(message, f"üîñ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫–ª–∞–¥–∫–∞:\n\n{bk}")

@router.message(Command("forget"))
async def cmd_forget(message: Message):
    ok = await forget_last_bookmark(message.chat.id)
    await message.answer("üóë –£–¥–∞–ª–∏–ª –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫–ª–∞–¥–∫—É." if ok else "–ó–∞–∫–ª–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –†–µ–∂–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è ¬´–£—á–∏—Ç–µ–ª—å¬ª (—Ä–∞–∑–æ–≤–æ)
@router.message(Command("explain"))
async def cmd_explain(message: Message, state: FSMContext):
    if not await _is_pro(message.chat.id):
        return await message.answer("üë©‚Äçüè´ –†–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ PRO.", reply_markup=available_btn_kb())
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å/–∑–∞–¥–∞—á—É ‚Äî –æ–±—ä—è—Å–Ω—é –∫–∞–∫ —É—á–∏—Ç–µ–ª—å: –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏, —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –º–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫–∞.")
    await set_teacher_mode(message.chat.id, True)

# ---------- FAQ / –ü–æ–º–æ—â—å ----------
FAQ_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")],
        [KeyboardButton(text="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)

@router.message(F.text == "FAQ / –ü–æ–º–æ—â—å")
async def faq_main(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=FAQ_KB)

@router.message(F.text == "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")
async def faq_how(message: Message):
    text = (
        "<b>üìò –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        "üëã <i>–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –∏ —Ç–µ–∫—Å—Ç, –∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—ã.</i>\n\n"
        "1Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è</b> ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–±–æ—Ä –ø–æ —à–∞–≥–∞–º: "
        "<i>–î–∞–Ω–æ ‚Üí –¢—Ä–µ–±—É–µ—Ç—Å—è ‚Üí –§–æ—Ä–º—É–ª—ã ‚Üí –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Üí –ò—Ç–æ–≥</i>.\n"
        "2Ô∏è‚É£ <b>–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º</b> –∑–∞–¥–∞—á—É/–≤–æ–ø—Ä–æ—Å ‚Äî –±–æ—Ç —Ç–æ–∂–µ —Ä–∞–∑–±–µ—Ä—ë—Ç.\n"
        "3Ô∏è‚É£ <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–¥ –æ—Ç–≤–µ—Ç–æ–º</b> (–¥–ª—è PRO): "
        "¬´<i>PDF</i>¬ª, ¬´<i>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è</i>¬ª, ¬´<i>–û–∑–≤—É—á–∏—Ç—å</i>¬ª.\n"
        "4Ô∏è‚É£ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã</b>: –≤–∫–ª—é—á–∏—Ç–µ <code>/voice_on</code>, –≤—ã–∫–ª—é—á–∏—Ç–µ <code>/voice_off</code>.\n\n"
        "üß≠ <b>–ì–¥–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å</b>\n"
        "‚Ä¢ <b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞, —Ä–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è, —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n"
        "‚Ä¢ <b>üßæ –°—Ç–∞—Ç—É—Å/—Ç–∞—Ä–∏—Ñ</b> ‚Äî ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª (–∏–ª–∏ ¬´–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω¬ª –≤ FREE).\n\n"
        "üí° <i>–°–æ–≤–µ—Ç:</i> –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—á–∏—Å–µ–ª/—É—Å–ª–æ–≤–∏–π), –±–æ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å."
    )
    await message.answer(text, parse_mode=ParseMode.HTML)

@router.message(F.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def faq_questions(message: Message):
    text = (
        "<b>‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "‚Ä¢ <b>–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?</b>\n"
        "  –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ <b>–Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É</b>, —Ç–∞–∫ –∫–∞–∫ –æ–ø–ª–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ, "
        "–∞ –¥–æ –ø–æ–∫—É–ø–∫–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.\n\n"
        "‚Ä¢ <b>–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?</b>\n"
        "  –ß–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤ –±–æ—Ç–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "‚Ä¢ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?</b>\n"
        "  –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç <i>—Ä–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏, –ø–æ—è—Å–Ω–∏—Ç—å —Ç–µ–æ—Ä–∏—é, –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ</i>. "
        "–≠—Ç–æ –ø–æ–º–æ—â–Ω–∏–∫, –∞ –Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n\n"
        "‚Ä¢ <b>–ì–¥–µ –≤–∫–ª—é—á–∏—Ç—å –æ–∑–≤—É—á–∫—É/—Ä–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è?</b>\n"
        "  –í —Ä–∞–∑–¥–µ–ª–µ <b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> (–¥–æ—Å—Ç—É–ø–Ω–æ –≤ PRO). –ö–æ–º–∞–Ω–¥—ã: "
        "<code>/voice_on</code>, <code>/voice_off</code>.\n\n"
        "‚Ä¢ <b>PDF –∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è¬ª?</b>\n"
        "  –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –æ—Ç–≤–µ—Ç–æ–º (–≤ PRO). PDF ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–¥–∞—á–∏, "
        "–º–∏–Ω–∏-—Ç–µ—Å—Ç ‚Äî 3‚Äì4 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏."
    )
    await message.answer(text, parse_mode=ParseMode.HTML)

@router.message(F.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
async def faq_offer(message: Message):
    offer_text = (
        "üìë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n\n"
        "1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n"
        "1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äì ¬´–°–æ–≥–ª–∞—à–µ–Ω–∏–µ¬ª) —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram-–±–æ—Ç–∞ ¬´–£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫¬ª (–¥–∞–ª–µ–µ ‚Äì ¬´–ë–æ—Ç¬ª).\n"
        "1.2. –ò—Å–ø–æ–ª—å–∑—É—è –ë–æ—Ç, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.\n"
        "1.3. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ–º.\n\n"
        "2. –£—Å–ª—É–≥–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ë–æ—Ç–∞\n"
        "2.1. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ä–µ—à–µ–Ω–∏–π.\n"
        "2.2. –î–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.\n"
        "2.3. –û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ.\n\n"
        "3. –û–ø–ª–∞—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã\n"
        "3.1. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –ë–æ—Ç–µ.\n"
        "3.2. –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ, –∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∏–º–µ–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–π —É—Å–ª—É–≥–∏.\n"
        "3.3. –í —Å–ª—É—á–∞–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —É—Å–ª—É–≥–∞ –Ω–µ –±—ã–ª–∞ –æ–∫–∞–∑–∞–Ω–∞, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø—Ä–∞–≤–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
        "4. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω\n"
        "4.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–æ—Ç –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.\n"
        "4.2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞:\n"
        "   ‚Äì –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º;\n"
        "   ‚Äì –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–±–æ–∏ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ç.–ø.).\n"
        "4.3. –í—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ª–µ–∂–∏—Ç –Ω–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n\n"
        "5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "5.1. –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: Telegram ID, username –∏ –∏–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å–∞–º–∏–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
        "5.2. –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É—á–∞–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.\n\n"
        "6. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
        "6.1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –∏–∑–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ë–æ—Ç–∞, –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É.\n"
        "6.2. –û–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ë–æ—Ç–∞.\n\n"
        "7. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n"
        "7.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–æ—Ç–∞.\n"
        "7.2. –í—Å–µ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ–º, —Ä–µ—à–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.\n"
        "7.3. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π: @gptEDU_support"
    )
    if len(offer_text) > MAX_TG_LEN:
        await send_long_text(message, offer_text)
    else:
        await message.answer(offer_text)

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def faq_back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb_for_plan(await _is_free(message.chat.id)))

# ---------- Admin panel / —Ä–∞—Å—Å—ã–ª–∫–∏ ----------
import json
from pathlib import Path

SECRET_ADMIN_CODES = {c.strip() for c in os.getenv("SECRET_ADMIN_CODES", "").split(",") if c.strip()}
ADMINS_FILE = Path("admins.json")
MAX_ADMINS = 2
ADMINS: set[int] = set()

def _load_admins():
    global ADMINS
    if ADMINS_FILE.exists():
        try:
            data = json.loads(ADMINS_FILE.read_text(encoding="utf-8"))
            if isinstance(data, list):
                ADMINS = set(int(x) for x in data)
        except Exception:
            ADMINS = set()

def _save_admins():
    try:
        ADMINS_FILE.write_text(json.dumps(sorted(list(ADMINS))), encoding="utf-8")
    except Exception:
        pass

_load_admins()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

ADMIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî —Ç–µ–∫—Å—Ç"), KeyboardButton(text="üñºÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üìä –ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"), KeyboardButton(text="‚è™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞")],
    ],
    resize_keyboard=True,
)

@router.message(lambda m: (m.text or "").strip() in SECRET_ADMIN_CODES)
async def secret_code_grant(message: Message):
    uid = message.from_user.id
    if is_admin(uid):
        return await message.answer("–í—ã —É–∂–µ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ.", reply_markup=ADMIN_KB)

    if len(ADMINS) >= MAX_ADMINS:
        return await message.answer("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç (2 –∞–¥–º–∏–Ω–∞).", reply_markup=main_kb_for_plan(await _is_free(message.chat.id)))

    ADMINS.add(uid)
    _save_admins()
    await message.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=ADMIN_KB)

@router.message(Command("admin"))
async def cmd_admin_open(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ADMIN_KB)

@router.message(F.text == "‚è™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞")
async def admin_logout(message: Message):
    uid = message.from_user.id
    if is_admin(uid):
        ADMINS.discard(uid)
        _save_admins()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞.", reply_markup=main_kb_for_plan(await _is_free(message.chat.id)))
    else:
        await message.answer("–í—ã –Ω–µ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ.", reply_markup=main_kb_for_plan(await _is_free(message.chat.id)))

@router.message(Command("unsubscribe"))
async def cmd_unsub(message: Message):
    await set_optin(message.chat.id, False)
    await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫. –í–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞: /subscribe")

@router.message(Command("subscribe"))
async def cmd_sub(message: Message):
    await set_optin(message.chat.id, True)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–∫–ª—é—á–∏—Ç—å: /unsubscribe")

class AdminBroadcastStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()
    waiting_for_caption = State()
    confirm = State()

BROADCAST_CONCURRENCY = 20
BROADCAST_DELAY_SEC   = 0.03

def _progress_bar(pct: float, width: int = 12) -> str:
    done = int(round(pct * width))
    return f"[{'‚ñà'*done}{'‚Äî'*(width-done)}] {int(pct*100)}%"

def _confirm_kb(kind: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"bcast_confirm_{kind}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",    callback_data="bcast_cancel"),
    ]])

# ---- –ê–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏
@router.message(F.text == "üìä –ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
async def admin_count(message: Message):
    if not is_admin(message.from_user.id):
        return
    ids = await get_all_chat_ids()
    await message.answer(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–≤ –±–∞–∑–µ): {len(ids)}")

@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî —Ç–µ–∫—Å—Ç")
async def admin_broadcast_text_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await state.set_state(AdminBroadcastStates.waiting_for_text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (plain/markdown).")

@router.message(AdminBroadcastStates.waiting_for_text, F.text)
async def admin_broadcast_text_preview(message: Message, state: FSMContext):
    await state.update_data(kind="text", text=message.text)
    await state.set_state(AdminBroadcastStates.confirm)
    await message.answer("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await message.answer(message.text)
    await message.answer("–†–∞–∑–æ—Å–ª–∞—Ç—å?", reply_markup=_confirm_kb("text"))

@router.message(F.text == "üñºÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî —Ñ–æ—Ç–æ")
async def admin_broadcast_photo_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await state.set_state(AdminBroadcastStates.waiting_for_photo)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

@router.message(AdminBroadcastStates.waiting_for_photo, F.photo)
async def admin_broadcast_photo_got(message: Message, state: FSMContext):
    await state.update_data(kind="photo", file_id=message.photo[-1].file_id)
    await state.set_state(AdminBroadcastStates.waiting_for_caption)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ ¬´-¬ª —á—Ç–æ–±—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏).")

@router.message(AdminBroadcastStates.waiting_for_caption, F.text)
async def admin_broadcast_photo_preview(message: Message, state: FSMContext):
    data = await state.get_data()
    caption = None if message.text.strip() == "-" else message.text
    await state.update_data(caption=caption)
    await state.set_state(AdminBroadcastStates.confirm)
    await message.answer("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await message.answer_photo(photo=data["file_id"], caption=caption)
    await message.answer("–†–∞–∑–æ—Å–ª–∞—Ç—å?", reply_markup=_confirm_kb("photo"))

@router.callback_query(F.data == "bcast_cancel")
async def admin_broadcast_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.answer()

async def _deliver_to_all(bot, send_corofn, progress_msg: Message):
    ids: List[int] = await get_all_chat_ids()
    total = len(ids)
    ok = 0
    sem = asyncio.Semaphore(BROADCAST_CONCURRENCY)

    async def send_one(chat_id: int):
        nonlocal ok
        async with sem:
            try:
                await send_corofn(chat_id)
                ok += 1
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after + 1)
                try:
                    await send_corofn(chat_id)
                    ok += 1
                except Exception:
                    pass
            except TelegramBadRequest as e:
                # —É–¥–∞–ª—ë–Ω–Ω—ã–π —á–∞—Ç/–±–ª–æ–∫ ‚Äî –º–æ–∂–Ω–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å
                txt = str(e).lower()
                if "bot was blocked" in txt or "chat not found" in txt:
                    try:
                        await drop_chat(chat_id)
                    except Exception:
                        pass
            except Exception:
                pass
            # –ø—Ä–æ–≥—Ä–µ—Å—Å
            try:
                pct = ok / max(1, total)
                await bot.edit_message_text(
                    chat_id=progress_msg.chat.id,
                    message_id=progress_msg.message_id,
                    text=f"–†–∞—Å—Å—ã–ª–∫–∞‚Ä¶ {ok}/{total} {_progress_bar(pct)}"
                )
            except Exception:
                pass
            await asyncio.sleep(BROADCAST_DELAY_SEC)

    await asyncio.gather(*(send_one(cid) for cid in ids))
    try:
        await bot.edit_message_text(
            chat_id=progress_msg.chat.id,
            message_id=progress_msg.message_id,
            text=f"–ì–æ—Ç–æ–≤–æ ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {ok}/{total}"
        )
    except Exception:
        pass

@router.callback_query(F.data.in_(("bcast_confirm_text", "bcast_confirm_photo")))
async def admin_broadcast_confirm(call: CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        return await call.answer()
    data = await state.get_data()
    kind = "text" if call.data.endswith("text") else "photo"
    await state.clear()

    progress = await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞‚Ä¶")
    bot = call.message.bot

    if kind == "text":
        text = data["text"]
        async def sender(chat_id: int):
            await bot.send_message(chat_id, text)
        await _deliver_to_all(bot, sender, progress)
    else:
        file_id = data["file_id"]
        caption = data.get("caption")
        async def sender(chat_id: int):
            await bot.send_photo(chat_id, file_id, caption=caption)
        await _deliver_to_all(bot, sender, progress)

    await call.answer()

# ---------- Callback-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–º ----------
@router.callback_query(F.data == "show_plans")
async def cb_show_plans(call: CallbackQuery):
    await call.message.edit_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:", reply_markup=plans_kb(show_back=True))
    await call.answer()

@router.callback_query(F.data == "back_to_subs")
async def cb_back_to_subs(call: CallbackQuery):
    text = await get_status_text(call.message.chat.id)
    kb: Optional[InlineKeyboardMarkup] = None
    low = text.lower()
    if "–ø–ª–∞–Ω: lite" in low or "–ø–ª–∞–Ω: free" in low:
        text += "\n\n‚¨ÜÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ PRO –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."
        kb = available_btn_kb()
    await call.message.edit_text(text, reply_markup=kb)
    await call.answer()

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ----------
@router.message(StateFilter('generating'))
async def wait_response(message: Message):
    await safe_send(message, "‚è≥ –û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!")

@router.message(F.text == "üßæ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def _open_subs_direct(message: Message):
    await show_subscriptions(message)

@router.message(F.text == "üîº –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω")
async def _open_plans_direct(message: Message):
    await kb_upgrade(message)

@router.message(F.text & ~F.text.startswith("/"))
async def generate_answer(message: Message, state: FSMContext):
    chat_id = message.chat.id
    user_text = (message.text or "").strip()
    if not user_text:
        return

    now = time.monotonic()
    next_allowed = _next_allowed_by_chat.get(chat_id, 0.0)
    if now < next_allowed:
        seconds_left = int(next_allowed - now + 0.999)
        asyncio.create_task(show_cooldown_counter(message, seconds_left))
        return
    _next_allowed_by_chat[chat_id] = now + COOLDOWN_SECONDS

    await ensure_user(chat_id)
    allowed, msg = await can_use(await ensure_user(chat_id), "text")
    if not allowed:
        await message.answer(msg, reply_markup=plans_kb(show_back=True))
        return

    is_pro = await _is_pro(chat_id)
    if is_pro and await is_teacher_mode(chat_id):
        user_text = (
            "–û–±—ä—è—Å–Ω–∏ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å: –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ, –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, "
            "–≥–¥–µ —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è, –º–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 2‚Äì3 –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ.\n\n–í–æ–ø—Ä–æ—Å: "
            + user_text
        )

    await state.set_state("generating")
    await message.bot.send_chat_action(chat_id, ChatAction.TYPING)
    draft = await safe_send(message, "–î—É–º–∞—é‚Ä¶")

    typing_alive = True
    async def typing_loop():
        while typing_alive:
            try:
                await message.bot.send_chat_action(chat_id, ChatAction.TYPING)
            except Exception:
                pass
            await asyncio.sleep(4)
    typing_task = asyncio.create_task(typing_loop())

    accumulated = ""
    last_edit = 0.0

    try:
        history_msgs = await get_history(chat_id)
        async for delta in stream_response_text(user_text, history_msgs, priority=is_pro, teacher_mode=False):
            accumulated += delta
            t = asyncio.get_event_loop().time()
            if t - last_edit >= MIN_EDIT_INTERVAL:
                await safe_edit(message, draft.message_id, accumulated or "‚Ä¶")
                last_edit = t

        final_text = (f"‚ö° PRO-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n{accumulated}" if is_pro else accumulated) if accumulated else ""

        if final_text:
            if len(final_text) > MAX_TG_LEN:
                await safe_delete(draft)
                await send_long_text(message, final_text)
                await message.answer("–î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º:", reply_markup=answer_actions_kb(is_pro))
            else:
                await safe_edit(message, draft.message_id, final_text, reply_markup=answer_actions_kb(is_pro))
        else:
            await safe_edit(message, draft.message_id, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç üòï")

        await add_history(chat_id, "user", user_text)
        await add_history(chat_id, "assistant", accumulated or "")
        await inc_usage(chat_id, "text")

        if is_pro:
            vs = await get_voice_settings(chat_id)
            if vs.get("auto") and accumulated:
                await _send_tts_for_text(message, accumulated)

    except Exception as e:
        await safe_edit(message, draft.message_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        typing_alive = False
        typing_task.cancel()
        await state.clear()

# ---------- –§–æ—Ç–æ-–∑–∞–¥–∞—á–∏ ----------
@router.message(F.photo)
async def on_photo(message: Message, state: FSMContext):
    chat_id = message.chat.id

    now = time.monotonic()
    next_allowed = _next_allowed_by_chat.get(chat_id, 0.0)
    if now < next_allowed:
        seconds_left = int(next_allowed - now + 0.999)
        asyncio.create_task(show_cooldown_counter(message, seconds_left))
        return
    _next_allowed_by_chat[chat_id] = now + COOLDOWN_SECONDS

    await ensure_user(chat_id)
    allowed, msg = await can_use(await ensure_user(chat_id), "photo")
    if not allowed:
        await message.answer(msg, reply_markup=plans_kb(show_back=True))
        return

    await state.set_state("generating")
    await message.bot.send_chat_action(chat_id, ChatAction.TYPING)
    draft = await safe_send(message, "–†–∞—Å–ø–æ–∑–Ω–∞—é –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ‚Ä¶")

    try:
        largest = message.photo[-1]
        file = await message.bot.get_file(largest.file_id)
        buf = BytesIO()
        await message.bot.download_file(file.file_path, buf)
        image_bytes = buf.getvalue()

        teacher_hint = ""
        if await _is_pro(chat_id) and await is_teacher_mode(chat_id):
            teacher_hint = (
                "–û–±—ä—è—Å–Ω—è–π –∫–∞–∫ —É—á–∏—Ç–µ–ª—å: –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ, –ø–æ—à–∞–≥–æ–≤–æ, —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏, –≤ –∫–æ–Ω—Ü–µ –º–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫–∞ (2‚Äì3 –≤–æ–ø—Ä–æ—Å–∞). "
            )

        answer = await solve_from_image(
            image_bytes,
            hint= teacher_hint + "–†–∞—Å–ø–æ–∑–Ω–∞–π —É—Å–ª–æ–≤–∏–µ –∏ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É. –ü–æ–∫–∞–∂–∏ —Ñ–æ—Ä–º—É–ª—ã, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –∏—Ç–æ–≥.",
            history=await get_history(chat_id)
        )

        is_pro = await _is_pro(chat_id)
        final_text = f"‚ö° PRO-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n{answer}" if (is_pro and answer) else (answer or "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á—É.")

        if len(final_text) > MAX_TG_LEN:
            await safe_delete(draft)
            await send_long_text(message, final_text)
            if answer:
                await message.answer("–î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º:", reply_markup=answer_actions_kb(is_pro))
        else:
            await safe_edit(
                message, draft.message_id, final_text,
                reply_markup=answer_actions_kb(is_pro and bool(answer))
            )

        await add_history(chat_id, "user", "[–§–æ—Ç–æ –∑–∞–¥–∞—á–∏]")
        await add_history(chat_id, "assistant", answer or "")
        await inc_usage(chat_id, "photo")

        if is_pro:
            vs = await get_voice_settings(chat_id)
            if vs.get("auto") and answer:
                await _send_tts_for_text(message, answer)

    except Exception as e:
        await safe_edit(message, draft.message_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ —Ñ–æ—Ç–æ: {e}")
    finally:
        await state.clear()

# ---------- TTS & –ø—Ä–æ—á–∏–µ callbacks ----------
@router.callback_query(F.data == "tts_say")
async def cb_tts_say(call: CallbackQuery):
    chat_id = call.message.chat.id
    if not await _is_pro(chat_id):
        await call.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ PRO", show_alert=True)
        return
    text = await _last_assistant_text(chat_id)
    if not text:
        await call.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏", show_alert=True)
        return
    await call.answer("–û–∑–≤—É—á–∏–≤–∞—é‚Ä¶", show_alert=False)
    try:
        await _send_tts_for_text(call.message, text)
    except Exception as e:
        try:
            await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
        except Exception:
            pass

@router.callback_query(F.data == "export_pdf")
async def cb_export_pdf(call: CallbackQuery):
    chat_id = call.message.chat.id
    if not await _is_pro(chat_id):
        return await call.answer("–≠–∫—Å–ø–æ—Ä—Ç PDF –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ PRO.", show_alert=True)
    answer = await _last_assistant_text(chat_id)
    if not answer:
        await call.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return
    try:
        pdf = pdf_from_answer_text(answer, title="–†–∞–∑–±–æ—Ä –∑–∞–¥–∞—á–∏", author="–£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        bi = BufferedInputFile(pdf.getvalue(), filename="razbor.pdf")
        await call.message.answer_document(document=bi, caption="üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ PDF")
        await call.answer()
    except Exception as e:
        await call.answer(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", show_alert=True)

@router.callback_query(F.data == "quiz_make")
async def cb_quiz_make(call: CallbackQuery):
    chat_id = call.message.chat.id
    if not await _is_pro(chat_id):
        return await call.answer("–ú–∏–Ω–∏-—Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ PRO.", show_alert=True)

    answer = await _last_assistant_text(chat_id)
    if not answer or len(answer) < 40:
        return await call.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ —Ä–∞–∑–±–æ—Ä/–æ—Ç–≤–µ—Ç, –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—é —Ç–µ—Å—Ç.", show_alert=True)

    await call.answer("–ì–æ—Ç–æ–≤–ª—é –º–∏–Ω–∏-—Ç–µ—Å—Ç‚Ä¶", show_alert=False)
    try:
        md, data = await quiz_from_answer(answer, n_questions=4)
        # –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º markdown –≤–µ—Ä—Å–∏—é
        await call.message.answer(f"üß† –ú–∏–Ω–∏-—Ç–µ—Å—Ç\n\n{md}")
    except Exception as e:
        await call.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç: {e}")

# –ê–ø—Å–µ–ª–ª-–∑–∞–º–æ—á–∫–∏
@router.callback_query(F.data.in_(("need_pro_pdf","need_pro_quiz")))
async def cb_need_pro(call: CallbackQuery):
    await call.answer("–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO.", show_alert=True)
    await call.message.answer("–û—Ñ–æ—Ä–º–∏—Ç–µ PRO, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å PDF –∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç:", reply_markup=plans_kb(show_back=False))

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å TTS –ø–æ —Ç–µ–∫—Å—Ç—É ----------
async def _send_tts_for_text(message: Message, text: str):
    """–†–µ–∂–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ —à–ª—ë–º voice .ogg (Opus) —Å —É—á—ë—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è –≥–æ–ª–æ—Å–∞ (–∏–º—è + —Å–∫–æ—Ä–æ—Å—Ç—å)."""
    chunks = split_for_tts(text, max_chars=TTS_CHUNK_LIMIT)
    try:
        vs = await get_voice_settings(message.chat.id)
    except Exception:
        vs = {"name": None, "speed": None}
    voice_name = (vs or {}).get("name")
    voice_speed = (vs or {}).get("speed")

    for idx, chunk in enumerate(chunks, 1):
        try:
            voice_bio = await tts_voice_ogg(chunk, voice=voice_name, speed=voice_speed)
            file = BufferedInputFile(voice_bio.getvalue(), filename=voice_bio.name or "voice.ogg")
            cap = f"üéô –û–∑–≤—É—á–∫–∞ ({idx}/{len(chunks)})" if len(chunks) > 1 else "üéô –û–∑–≤—É—á–∫–∞"
            await message.answer_voice(voice=file, caption=cap)
            await asyncio.sleep(0.3)
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —á–∞—Å—Ç—å {idx}: {e}")
            break
