# db.py
import os
import datetime as dt
from typing import Optional, Literal, Tuple, List  # --- added/updated ---

from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv

load_dotenv()

MONGODB_URI = os.getenv("MONGODB_URI")
MONGODB_DB  = os.getenv("MONGODB_DB", "schoolbot")

if not MONGODB_URI:
    raise RuntimeError("MONGODB_URI is not set in .env")

# –í–ê–ñ–ù–û: –≤–∫–ª—é—á–∞–µ–º tz_aware, —á—Ç–æ–±—ã Mongo –≤–æ–∑–≤—Ä–∞—â–∞–ª tz-aware –¥–∞—Ç—ã (UTC)
client = AsyncIOMotorClient(MONGODB_URI, tz_aware=True, tzinfo=dt.timezone.utc)
db = client[MONGODB_DB]
users = db["users"]

Plan = Literal["free", "lite", "pro"]

# --- –ª–∏–º–∏—Ç—ã ---
FREE_TEXT_LIMIT  = 3
FREE_PHOTO_LIMIT = 2

# LITE (–º–µ–Ω—è—é—Ç—Å—è –≤ .env)
LITE_TEXT_LIMIT  = int(os.getenv("LITE_TEXT_LIMIT",  "300"))
LITE_PHOTO_LIMIT = int(os.getenv("LITE_PHOTO_LIMIT", "120"))

UNLIMITED = 10**12  # ¬´–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å¬ª –¥–ª—è PRO

def _now_utc() -> dt.datetime:
    return dt.datetime.now(dt.timezone.utc)

def _month_key(d: dt.datetime) -> str:
    return d.strftime("%Y-%m")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "2025-09"

def _to_aware_utc(value) -> Optional[dt.datetime]:
    """–ü—Ä–∏–≤–æ–¥–∏–º –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç—ã –∫ tz-aware UTC (–∏–ª–∏ None)."""
    if value is None:
        return None
    if isinstance(value, dt.datetime):
        if value.tzinfo is None:
            return value.replace(tzinfo=dt.timezone.utc)
        return value.astimezone(dt.timezone.utc)
    if isinstance(value, str):
        try:
            parsed = dt.datetime.fromisoformat(value.replace("Z", "+00:00"))
        except Exception:
            return None
        if parsed.tzinfo is None:
            parsed = parsed.replace(tzinfo=dt.timezone.utc)
        return parsed.astimezone(dt.timezone.utc)
    return None

async def ensure_user(chat_id: int) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –æ–±–Ω—É–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –º–µ—Å—è—Ü–µ.
       –ü–æ–ø—É—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç sub_expires_at –∫ tz-aware UTC, –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å naive.
       –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç/–º–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–µ optin –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫."""
    now = _now_utc()
    doc = await users.find_one({"chat_id": chat_id})
    if doc:
        # --- –º–∏–≥—Ä–∞—Ü–∏—è optin: –µ—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç, –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "optin" not in doc:
            await users.update_one({"chat_id": chat_id}, {"$set": {"optin": True}})
            doc["optin"] = True
        # –ú–∏–≥—Ä–∞—Ü–∏—è: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –∫ aware UTC
        raw_exp = doc.get("sub_expires_at")
        norm_exp = _to_aware_utc(raw_exp)
        if norm_exp != raw_exp:
            await users.update_one({"chat_id": chat_id}, {"$set": {"sub_expires_at": norm_exp}})
            doc["sub_expires_at"] = norm_exp

        month = _month_key(now)
        if doc.get("period_month") != month:
            await users.update_one(
                {"chat_id": chat_id},
                {"$set": {"period_month": month, "text_used": 0, "photo_used": 0}}
            )
            doc["period_month"] = month
            doc["text_used"] = 0
            doc["photo_used"] = 0
        return doc

    doc = {
        "chat_id": chat_id,
        "created_at": now,
        "plan": "free",           # free / lite / pro
        "sub_expires_at": None,   # –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è lite/pro)
        "period_month": _month_key(now),
        "text_used": 0,
        "photo_used": 0,
        "optin": True,            # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    await users.insert_one(doc)
    return doc

async def _is_subscription_active(doc: dict) -> bool:
    if doc.get("plan") in ("lite", "pro"):
        exp = _to_aware_utc(doc.get("sub_expires_at"))
        return bool(exp and exp > _now_utc())
    return False

async def get_limits(doc: dict) -> Tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text_limit, photo_limit) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
    FREE: 3 / 2
    LITE (–∞–∫—Ç–∏–≤–Ω–∞): –±–µ—Ä—ë—Ç –∏–∑ .env (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 / 120)
    PRO (–∞–∫—Ç–∏–≤–Ω–∞): –±–µ–∑–ª–∏–º–∏—Ç
    """
    plan = doc.get("plan", "free")
    active = await _is_subscription_active(doc)

    if plan == "pro" and active:
        return (UNLIMITED, UNLIMITED)
    if plan == "lite" and active:
        return (LITE_TEXT_LIMIT, LITE_PHOTO_LIMIT)
    # free –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    return (FREE_TEXT_LIMIT, FREE_PHOTO_LIMIT)

async def can_use(doc: dict, kind: Literal["text", "photo"]) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç; (allowed, msg_if_blocked). –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω."""
    text_limit, photo_limit = await get_limits(doc)
    tu, pu = doc.get("text_used", 0), doc.get("photo_used", 0)
    plan = doc.get("plan", "free")
    active = await _is_subscription_active(doc)

    def _msg_free() -> str:
        return (
            "üö´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n"
            f"‚Ä¢ Lite ‚Äî 199.99 ‚ÇΩ / 30 –¥–Ω–µ–π (–¥–æ {LITE_TEXT_LIMIT} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –¥–æ {LITE_PHOTO_LIMIT} —Ñ–æ—Ç–æ-—Ä–µ—à–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü)\n"
            "‚Ä¢ Pro  ‚Äî 299.99 ‚ÇΩ / 30 –¥–Ω–µ–π (–±–µ–∑–ª–∏–º–∏—Ç + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)\n"
            "–ö–æ–º–∞–Ω–¥—ã: /buy199 –∏–ª–∏ /buy299"
        )

    def _msg_lite() -> str:
        if kind == "text":
            return (f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç LITE –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º: {tu}/{text_limit} –∑–∞ –º–µ—Å—è—Ü.\n\n"
                    "–ü—Ä–æ–¥–ª–∏—Ç–µ LITE –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ PRO (–±–µ–∑–ª–∏–º–∏—Ç).\n"
                    "–ö–æ–º–∞–Ω–¥—ã: /buy199 –∏–ª–∏ /buy299")
        else:
            return (f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç LITE –ø–æ —Ä–µ—à–µ–Ω–∏—è–º —Å —Ñ–æ—Ç–æ: {pu}/{photo_limit} –∑–∞ –º–µ—Å—è—Ü.\n\n"
                    "–ü—Ä–æ–¥–ª–∏—Ç–µ LITE –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ PRO (–±–µ–∑–ª–∏–º–∏—Ç).\n"
                    "–ö–æ–º–∞–Ω–¥—ã: /buy199 –∏–ª–∏ /buy299")

    if kind == "text":
        if tu < text_limit:
            return True, ""
        if plan == "lite" and active:
            return False, _msg_lite()
        return False, _msg_free()

    if kind == "photo":
        if pu < photo_limit:
            return True, ""
        if plan == "lite" and active:
            return False, _msg_lite()
        return False, _msg_free()

    return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞."

async def inc_usage(chat_id: int, kind: Literal["text", "photo"]) -> None:
    field = "text_used" if kind == "text" else "photo_used"
    await users.update_one({"chat_id": chat_id}, {"$inc": {field: 1}})

# --- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π ---
async def set_subscription(chat_id: int, plan: Plan, days: int = 30) -> dict:
    now = _now_utc()
    exp = now + dt.timedelta(days=days)
    await users.update_one(
        {"chat_id": chat_id},
        {"$set": {"plan": plan, "sub_expires_at": exp}},
        upsert=True,
    )
    return await users.find_one({"chat_id": chat_id})

async def get_status_text(chat_id: int) -> str:
    doc = await ensure_user(chat_id)
    text_limit, photo_limit = await get_limits(doc)
    active = await _is_subscription_active(doc)
    tu, pu = doc.get("text_used", 0), doc.get("photo_used", 0)
    plan = doc.get("plan", "free")
    exp  = _to_aware_utc(doc.get("sub_expires_at"))

    if active and plan == "pro":
        exp_s = exp.strftime("%Y-%m-%d %H:%M UTC")
        return (f"üì¶ –ü–ª–∞–Ω: PRO (–∞–∫—Ç–∏–≤–µ–Ω –¥–æ {exp_s})\n"
                f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: –±–µ–∑–ª–∏–º–∏—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {tu})\n"
                f"–†–µ—à–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ: –±–µ–∑–ª–∏–º–∏—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {pu})")

    if active and plan == "lite":
        exp_s = exp.strftime("%Y-%m-%d %H:%–ú UTC")
        return (f"üì¶ –ü–ª–∞–Ω: LITE (–∞–∫—Ç–∏–≤–µ–Ω –¥–æ {exp_s})\n"
                f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {tu}/{text_limit}\n"
                f"–†–µ—à–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ: {pu}/{photo_limit}")

    # free
    return (f"üì¶ –ü–ª–∞–Ω: FREE\n"
            f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {tu}/{text_limit}\n"
            f"–†–µ—à–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ: {pu}/{photo_limit}\n\n"
            f"–û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω: /plan")

# -------------------------------
# –†–∞—Å—Å—ã–ª–∫–∏ / –ø–æ–¥–ø–∏—Å–∫–∏ (optin)
# -------------------------------

async def set_optin(chat_id: int, optin: bool = True) -> None:
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await users.update_one({"chat_id": chat_id}, {"$set": {"optin": optin}}, upsert=True)

async def set_optin_for_all(value: bool = True) -> int:
    """–ú–∞—Å—Å–æ–≤–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å optin –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    res = await users.update_many({}, {"$set": {"optin": value}})
    return getattr(res, "modified_count", 0)

async def get_all_chat_ids(optin_only: bool = True) -> List[int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ chat_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    –ï—Å–ª–∏ optin_only=True ‚Äî –±–µ—Ä—ë–º —Ç–µ—Ö, —É –∫–æ–≥–æ optin=True –ò–õ–ò –ø–æ–ª–µ optin –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º True).
    """
    if optin_only:
        query = {"$or": [{"optin": True}, {"optin": {"$exists": False}}]}
    else:
        query = {}
    cursor = users.find(query, {"chat_id": 1, "_id": 0})
    return [doc["chat_id"] async for doc in cursor]

async def drop_chat(chat_id: int) -> None:
    """–£–¥–∞–ª–∏—Ç—å (–∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å) –º—ë—Ä—Ç–≤—ã–π —á–∞—Ç –∏–∑ –±–∞–∑—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."""
    await users.delete_one({"chat_id": chat_id})
