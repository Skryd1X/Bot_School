# db.py
import os
import datetime as dt
from typing import Optional, Literal, Tuple, List, Any, Dict

from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv

load_dotenv()

MONGODB_URI = os.getenv("MONGODB_URI")
MONGODB_DB  = os.getenv("MONGODB_DB", "schoolbot")

if not MONGODB_URI:
    raise RuntimeError("MONGODB_URI is not set in .env")

# –î–ª–∏–Ω–∞ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ .env)
MAX_TURNS = int(os.getenv("MAX_TURNS", "30"))

# tz-aware –∫–ª–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –¥–∞—Ç—ã –±—ã–ª–∏ –≤ UTC —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
client = AsyncIOMotorClient(MONGODB_URI, tz_aware=True, tzinfo=dt.timezone.utc)
db = client[MONGODB_DB]
users      = db["users"]
history    = db["history"]     # {chat_id, role, content, ts}
bookmarks  = db["bookmarks"]   # {chat_id, content, ts}

Plan = Literal["free", "lite", "pro"]

# --- –ª–∏–º–∏—Ç—ã ---
FREE_TEXT_LIMIT  = 3
FREE_PHOTO_LIMIT = 2

# LITE (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤ .env)
LITE_TEXT_LIMIT  = int(os.getenv("LITE_TEXT_LIMIT",  "300"))
LITE_PHOTO_LIMIT = int(os.getenv("LITE_PHOTO_LIMIT", "120"))

UNLIMITED = 10**12  # ¬´–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å¬ª –¥–ª—è PRO

# ---------- helpers (–≤—Ä–µ–º—è/–¥–∞—Ç—ã) ----------
def _now_utc() -> dt.datetime:
    return dt.datetime.now(dt.timezone.utc)

def _month_key(d: dt.datetime) -> str:
    return d.strftime("%Y-%m")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "2025-09"

def _to_aware_utc(value) -> Optional[dt.datetime]:
    """–ü—Ä–∏–≤–æ–¥–∏–º –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç—ã –∫ tz-aware UTC (–∏–ª–∏ None)."""
    if value is None:
        return None
    if isinstance(value, dt.datetime):
        if value.tzinfo is None:
            return value.replace(tzinfo=dt.timezone.utc)
        return value.astimezone(dt.timezone.utc)
    if isinstance(value, str):
        try:
            parsed = dt.datetime.fromisoformat(value.replace("Z", "+00:00"))
        except Exception:
            return None
        if parsed.tzinfo is None:
            parsed = parsed.replace(tzinfo=dt.timezone.utc)
        return parsed.astimezone(dt.timezone.utc)
    return None

# ---------- –¥–µ—Ñ–æ–ª—Ç—ã prefs ----------
_DEFAULT_PREFS: Dict[str, Any] = {
    # –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "voice": {
        "auto": False,                              # –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (PRO)
        "name": os.getenv("TTS_VOICE", "alloy"),
        "speed": float(os.getenv("DEFAULT_VOICE_SPEED", "1.0")),  # 0.5..1.6
    },
    # —Ä–µ–∂–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–π ¬´–£—á–∏—Ç–µ–ª—å¬ª
    "teacher_mode": False,
    # —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ (generic, conspect, ege, code_skeleton, essay_outline –∏ —Ç.–¥.)
    "answer_style": "generic",
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—á–µ—Ä–µ–¥–∏ (–¥–ª—è PRO –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å)
    "priority": False,
}

def _merge_defaults(p: Dict[str, Any] | None) -> Dict[str, Any]:
    """–ù–µ–∂–Ω–æ –¥–æ–º–µ—Ä–∂–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ prefs (–≤–ª–æ–∂–µ–Ω–Ω—ã–µ dict-–∏ —Ç–æ–∂–µ)."""
    out = dict(_DEFAULT_PREFS)
    p = p or {}
    # voice
    v = dict(_DEFAULT_PREFS["voice"])
    v.update((p.get("voice") or {}))
    out["voice"] = v
    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–∏
    for k in ("teacher_mode", "answer_style", "priority"):
        out[k] = p.get(k, _DEFAULT_PREFS[k])
    return out

# ---------- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ----------
async def ensure_user(chat_id: int) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –æ–±–Ω—É–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –º–µ—Å—è—Ü–µ.
    –ü–æ–ø—É—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç sub_expires_at –∫ tz-aware UTC, –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å naive.
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç/–º–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–µ optin –∏ prefs (—Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏).
    """
    now = _now_utc()
    doc = await users.find_one({"chat_id": chat_id})
    if doc:
        # –º–∏–≥—Ä–∞—Ü–∏—è optin
        if "optin" not in doc:
            await users.update_one({"chat_id": chat_id}, {"$set": {"optin": True}})
            doc["optin"] = True

        # –º–∏–≥—Ä–∞—Ü–∏—è/–¥–æ–º–µ—Ä–∂ prefs
        merged = _merge_defaults(doc.get("prefs") if isinstance(doc.get("prefs"), dict) else {})
        if doc.get("prefs") != merged:
            await users.update_one({"chat_id": chat_id}, {"$set": {"prefs": merged}})
            doc["prefs"] = merged

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        raw_exp = doc.get("sub_expires_at")
        norm_exp = _to_aware_utc(raw_exp)
        if norm_exp != raw_exp:
            await users.update_one({"chat_id": chat_id}, {"$set": {"sub_expires_at": norm_exp}})
            doc["sub_expires_at"] = norm_exp

        # —Å–±—Ä–æ—Å –ø–æ–º–µ—Å—è—á–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤
        month = _month_key(now)
        if doc.get("period_month") != month:
            await users.update_one(
                {"chat_id": chat_id},
                {"$set": {"period_month": month, "text_used": 0, "photo_used": 0}}
            )
            doc["period_month"] = month
            doc["text_used"] = 0
            doc["photo_used"] = 0
        return doc

    # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    doc = {
        "chat_id": chat_id,
        "created_at": now,
        "plan": "free",           # free / lite / pro
        "sub_expires_at": None,   # –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è lite/pro)
        "period_month": _month_key(now),
        "text_used": 0,
        "photo_used": 0,
        "optin": True,                   # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "prefs": _merge_defaults({}),    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    }
    await users.insert_one(doc)
    return doc

# ---------- –ø–æ–¥–ø–∏—Å–∫–∏ / –ª–∏–º–∏—Ç—ã ----------
async def _is_subscription_active(doc: dict) -> bool:
    if doc.get("plan") in ("lite", "pro"):
        exp = _to_aware_utc(doc.get("sub_expires_at"))
        return bool(exp and exp > _now_utc())
    return False

async def get_limits(doc: dict) -> Tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text_limit, photo_limit) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
    FREE: 3 / 2
    LITE (–∞–∫—Ç–∏–≤–Ω–∞): –±–µ—Ä—ë—Ç –∏–∑ .env (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 / 120)
    PRO (–∞–∫—Ç–∏–≤–Ω–∞): –±–µ–∑–ª–∏–º–∏—Ç
    """
    plan = doc.get("plan", "free")
    active = await _is_subscription_active(doc)

    if plan == "pro" and active:
        return (UNLIMITED, UNLIMITED)
    if plan == "lite" and active:
        return (LITE_TEXT_LIMIT, LITE_PHOTO_LIMIT)
    # free –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    return (FREE_TEXT_LIMIT, FREE_PHOTO_LIMIT)

async def can_use(doc: dict, kind: Literal["text", "photo"]) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç; (allowed, msg_if_blocked). –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω."""
    text_limit, photo_limit = await get_limits(doc)
    tu, pu = doc.get("text_used", 0), doc.get("photo_used", 0)
    plan = doc.get("plan", "free")
    active = await _is_subscription_active(doc)

    def _msg_free() -> str:
        return (
            "üö´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n"
            f"‚Ä¢ Lite ‚Äî 199.99 ‚ÇΩ / 30 –¥–Ω–µ–π (–¥–æ {LITE_TEXT_LIMIT} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –¥–æ {LITE_PHOTO_LIMIT} —Ñ–æ—Ç–æ-—Ä–µ—à–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü)\n"
            "‚Ä¢ Pro  ‚Äî 299.99 ‚ÇΩ / 30 –¥–Ω–µ–π (–±–µ–∑–ª–∏–º–∏—Ç + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)\n"
            "–ö–æ–º–∞–Ω–¥—ã: /buy199 –∏–ª–∏ /buy299"
        )

    def _msg_lite() -> str:
        if kind == "text":
            return (f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç LITE –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º: {tu}/{text_limit} –∑–∞ –º–µ—Å—è—Ü.\n\n"
                    "–ü—Ä–æ–¥–ª–∏—Ç–µ LITE –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ PRO (–±–µ–∑–ª–∏–º–∏—Ç).\n"
                    "–ö–æ–º–∞–Ω–¥—ã: /buy199 –∏–ª–∏ /buy299")
        else:
            return (f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç LITE –ø–æ —Ä–µ—à–µ–Ω–∏—è–º —Å —Ñ–æ—Ç–æ: {pu}/{photo_limit} –∑–∞ –º–µ—Å—è—Ü.\n\n"
                    "–ü—Ä–æ–¥–ª–∏—Ç–µ LITE –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ PRO (–±–µ–∑–ª–∏–º–∏—Ç).\n"
                    "–ö–æ–º–∞–Ω–¥—ã: /buy199 –∏–ª–∏ /buy299")

    if kind == "text":
        if tu < text_limit:
            return True, ""
        if plan == "lite" and active:
            return False, _msg_lite()
        return False, _msg_free()

    if kind == "photo":
        if pu < photo_limit:
            return True, ""
        if plan == "lite" and active:
            return False, _msg_lite()
        return False, _msg_free()

    return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞."

async def inc_usage(chat_id: int, kind: Literal["text", "photo"]) -> None:
    field = "text_used" if kind == "text" else "photo_used"
    await users.update_one({"chat_id": chat_id}, {"$inc": {field: 1}})

async def set_subscription(chat_id: int, plan: Plan, days: int = 30) -> dict:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (plan) –Ω–∞ N –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–æ–∫)."""
    now = _now_utc()
    exp = now + dt.timedelta(days=days)
    await users.update_one(
        {"chat_id": chat_id},
        {"$set": {"plan": plan, "sub_expires_at": exp}},
        upsert=True,
    )
    return await users.find_one({"chat_id": chat_id})

async def is_pro_active(chat_id: int) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: PRO –∏ —Å—Ä–æ–∫ –Ω–µ –∏—Å—Ç—ë–∫."""
    doc = await ensure_user(chat_id)
    return doc.get("plan") == "pro" and await _is_subscription_active(doc)

async def is_lite_active(chat_id: int) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: LITE –∏ —Å—Ä–æ–∫ –Ω–µ –∏—Å—Ç—ë–∫."""
    doc = await ensure_user(chat_id)
    return doc.get("plan") == "lite" and await _is_subscription_active(doc)

async def get_status_text(chat_id: int) -> str:
    doc = await ensure_user(chat_id)
    text_limit, photo_limit = await get_limits(doc)
    active = await _is_subscription_active(doc)
    tu, pu = doc.get("text_used", 0), doc.get("photo_used", 0)
    plan = doc.get("plan", "free")
    exp  = _to_aware_utc(doc.get("sub_expires_at"))

    if active and plan == "pro":
        exp_s = exp.strftime("%Y-%m-%d %H:%M UTC")
        return (f"üì¶ –ü–ª–∞–Ω: PRO (–∞–∫—Ç–∏–≤–µ–Ω –¥–æ {exp_s})\n"
                f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: –±–µ–∑–ª–∏–º–∏—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {tu})\n"
                f"–†–µ—à–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ: –±–µ–∑–ª–∏–º–∏—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {pu})")

    if active and plan == "lite":
        exp_s = exp.strftime("%Y-%m-%d %H:%M UTC")
        return (f"üì¶ –ü–ª–∞–Ω: LITE (–∞–∫—Ç–∏–≤–µ–Ω –¥–æ {exp_s})\n"
                f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {tu}/{text_limit}\n"
                f"–†–µ—à–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ: {pu}/{photo_limit}")

    # free
    return (f"üì¶ –ü–ª–∞–Ω: FREE\n"
            f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {tu}/{text_limit}\n"
            f"–†–µ—à–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ: {pu}/{photo_limit}\n\n"
            f"–û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω: /plan")

# -------------------------------
# –†–∞—Å—Å—ã–ª–∫–∏ / –ø–æ–¥–ø–∏—Å–∫–∏ (optin)
# -------------------------------
async def set_optin(chat_id: int, optin: bool = True) -> None:
    await users.update_one({"chat_id": chat_id}, {"$set": {"optin": optin}}, upsert=True)

async def set_optin_for_all(value: bool = True) -> int:
    res = await users.update_many({}, {"$set": {"optin": value}})
    return getattr(res, "modified_count", 0)

async def get_all_chat_ids(optin_only: bool = True) -> List[int]:
    if optin_only:
        query = {"$or": [{"optin": True}, {"optin": {"$exists": False}}]}
    else:
        query = {}
    cursor = users.find(query, {"chat_id": 1, "_id": 0})
    return [doc["chat_id"] async for doc in cursor]

async def drop_chat(chat_id: int) -> None:
    await users.delete_one({"chat_id": chat_id})

# -------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (prefs)
# -------------------------------
async def get_prefs(chat_id: int) -> Dict[str, Any]:
    doc = await ensure_user(chat_id)
    return _merge_defaults(doc.get("prefs") if isinstance(doc.get("prefs"), dict) else {})

async def set_pref(chat_id: int, key: str, value: Any) -> None:
    await users.update_one({"chat_id": chat_id}, {"$set": {f"prefs.{key}": value}}, upsert=True)

async def set_prefs(chat_id: int, updates: Dict[str, Any]) -> None:
    if not updates:
        return
    set_doc = {f"prefs.{k}": v for k, v in updates.items()}
    await users.update_one({"chat_id": chat_id}, {"$set": set_doc}, upsert=True)

async def get_pref_bool(chat_id: int, key: str, default: bool = False) -> bool:
    prefs = await get_prefs(chat_id)
    return bool(prefs.get(key, default))

# --- –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
async def get_voice_settings(chat_id: int) -> Dict[str, Any]:
    prefs = await get_prefs(chat_id)
    v = prefs.get("voice") or {}
    vv = dict(_DEFAULT_PREFS["voice"])
    vv.update(v)
    return vv

async def set_voice_settings(
    chat_id: int,
    name: Optional[str] = None,
    speed: Optional[float] = None,
    auto: Optional[bool] = None,
) -> None:
    updates: Dict[str, Any] = {}
    if name is not None:
        updates["prefs.voice.name"] = str(name)
    if speed is not None:
        s = max(0.5, min(1.6, float(speed)))
        updates["prefs.voice.speed"] = s
    if auto is not None:
        updates["prefs.voice.auto"] = bool(auto)
    if updates:
        await users.update_one({"chat_id": chat_id}, {"$set": updates}, upsert=True)

# --- —Ä–µ–∂–∏–º ¬´–£—á–∏—Ç–µ–ª—å¬ª ---
async def is_teacher_mode(chat_id: int) -> bool:
    prefs = await get_prefs(chat_id)
    return bool(prefs.get("teacher_mode", False))

async def set_teacher_mode(chat_id: int, on: bool) -> None:
    await users.update_one({"chat_id": chat_id}, {"$set": {"prefs.teacher_mode": bool(on)}}, upsert=True)

# --- —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ ---
async def get_answer_style(chat_id: int) -> str:
    prefs = await get_prefs(chat_id)
    return str(prefs.get("answer_style", "generic"))

async def set_answer_style(chat_id: int, style: str) -> None:
    await users.update_one({"chat_id": chat_id}, {"$set": {"prefs.answer_style": str(style)}}, upsert=True)

# --- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—á–µ—Ä–µ–¥–∏ (PRO-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ---
async def get_priority(chat_id: int) -> bool:
    prefs = await get_prefs(chat_id)
    # –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —Ñ–æ—Ä—Å–∏—Ç—å True –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ PRO:
    # if await is_pro_active(chat_id): return True
    return bool(prefs.get("priority", False))

async def set_priority(chat_id: int, on: bool) -> None:
    await users.update_one({"chat_id": chat_id}, {"$set": {"prefs.priority": bool(on)}}, upsert=True)

# -------------------------------
# –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ Mongo
# -------------------------------
async def add_history(chat_id: int, role: Literal["user", "assistant"], content: str, ts: Optional[dt.datetime] = None) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
    if not content:
        return
    await history.insert_one({
        "chat_id": chat_id,
        "role": role,
        "content": content,
        "ts": ts or _now_utc(),
    })

async def get_history(chat_id: int, max_turns: Optional[int] = None) -> List[Dict[str, str]]:
    """
    –ó–∞–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{role, content}, ...] –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
    max_turns ‚Äî —á–∏—Å–ª–æ —Ö–æ–¥–æ–≤ (–ø–∞—Ä–∞ ¬´user+assistant¬ª). –ï—Å–ª–∏ None ‚Äî –±–µ—Ä—ë–º MAX_TURNS.
    """
    limit_pairs = max_turns or MAX_TURNS
    # –í–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2*limit_pairs —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cursor = history.find({"chat_id": chat_id}).sort("ts", -1).limit(limit_pairs * 2)
    items = [ {"role": doc["role"], "content": doc["content"]} async for doc in cursor ]
    items.reverse()
    return items

async def clear_history(chat_id: int) -> None:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."""
    await history.delete_many({"chat_id": chat_id})

# -------------------------------
# –ó–∞–∫–ª–∞–¥–∫–∏ (remember/forget)
# -------------------------------
async def remember_bookmark(chat_id: int, content: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ª–µ–∑–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É/–æ—Ç–≤–µ—Ç –∫–∞–∫ –∑–∞–∫–ª–∞–¥–∫—É."""
    if not content:
        return
    await bookmarks.insert_one({
        "chat_id": chat_id,
        "content": content,
        "ts": _now_utc(),
    })

async def forget_last_bookmark(chat_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é —Å–≤–µ–∂—É—é) –∑–∞–∫–ª–∞–¥–∫—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."""
    doc = await bookmarks.find_one({"chat_id": chat_id}, sort=[("ts", -1)])
    if not doc:
        return False
    await bookmarks.delete_one({"_id": doc["_id"]})
    return True

async def get_last_bookmark(chat_id: int) -> Optional[str]:
    """–í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫–ª–∞–¥–∫—É (—Ç–µ–∫—Å—Ç) –∏–ª–∏ None."""
    doc = await bookmarks.find_one({"chat_id": chat_id}, sort=[("ts", -1)], projection={"content": 1})
    return (doc or {}).get("content")

# ==========================================================
#                 –† –ï –§ –ï –† –ê –õ –¨ –ù –ê –Ø   –° –ò –° –¢ –ï –ú –ê
# ==========================================================

# –ü–æ—Ä–æ–≥ –¥–ª—è –±–æ–Ω—É—Å–∞: –∫–∞–∂–¥—ã–µ N –æ–ø–ª–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äî +1 –º–µ—Å—è—Ü PRO.
# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ .env: REF_BONUS_THRESHOLD
REF_REWARD_BATCH = int(os.getenv("REF_BONUS_THRESHOLD", "6"))

async def extend_pro_months(chat_id: int, months: int = 1) -> dt.datetime:
    """
    –ü—Ä–æ–¥–ª–∏—Ç—å/–≤—ã–¥–∞—Ç—å PRO –Ω–∞ N –º–µ—Å—è—Ü–µ–≤.
    –ï—Å–ª–∏ PRO –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è, –∏–Ω–∞—á–µ ‚Äî –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
    """
    doc = await ensure_user(chat_id)
    now = _now_utc()
    active = await _is_subscription_active(doc) and (doc.get("plan") == "pro")
    start_from = _to_aware_utc(doc.get("sub_expires_at")) if active else now
    if start_from is None or start_from < now:
        start_from = now
    # —Å—á–∏—Ç–∞–µ–º ¬´–º–µ—Å—è—Ü¬ª –∫–∞–∫ 30 –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    new_until = start_from + dt.timedelta(days=30 * max(1, int(months)))
    await users.update_one(
        {"chat_id": chat_id},
        {"$set": {"plan": "pro", "sub_expires_at": new_until}},
        upsert=True
    )
    return new_until

async def get_or_create_ref_code(user_id: int) -> str:
    """–í–µ—Ä–Ω—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ñ-–∫–æ–¥ (—Å–æ–∑–¥–∞—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç). –ö–æ—Ä–æ—Ç–∫–∏–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π."""
    u = await users.find_one({"chat_id": user_id}, {"ref_code": 1})
    if u and u.get("ref_code"):
        return u["ref_code"]
    import secrets, string
    alphabet = string.ascii_lowercase + string.digits
    code = ''.join(secrets.choice(alphabet) for _ in range(7))
    while await users.find_one({"ref_code": code}, {"_id": 1}):
        code = ''.join(secrets.choice(alphabet) for _ in range(7))
    await users.update_one({"chat_id": user_id}, {"$set": {"ref_code": code}}, upsert=True)
    return code

async def find_user_by_ref_code(code: str) -> Optional[int]:
    """–ù–∞–π—Ç–∏ chat_id –ø–æ —Ä–µ—Ñ-–∫–æ–¥—É."""
    u = await users.find_one({"ref_code": code}, {"chat_id": 1})
    return int(u["chat_id"]) if u else None

async def set_referrer_once(user_id: int, referrer_id: int) -> bool:
    """
    –ü—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –æ–¥–∏–Ω —Ä–∞–∑. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫—Ä–µ–ø–∏–ª–∏.
    –ù–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–∞–º–æ–≥–æ –∫ —Å–µ–±–µ.
    """
    if user_id == referrer_id:
        return False
    u = await users.find_one({"chat_id": user_id}, {"referred_by": 1})
    if u and u.get("referred_by"):
        return False
    await users.update_one({"chat_id": user_id}, {"$set": {"referred_by": referrer_id}}, upsert=True)
    await users.update_one({"chat_id": referrer_id}, {"$inc": {"referred_count": 1}}, upsert=True)
    return True

async def get_referral_stats(user_id: int) -> dict:
    u = await users.find_one(
        {"chat_id": user_id},
        {"ref_code":1,"referred_by":1,"referred_count":1,"referred_paid_count":1}
    )
    if not u:
        return {"ref_code": None, "referred_by": None, "referred_count": 0, "referred_paid_count": 0}
    return {
        "ref_code": u.get("ref_code"),
        "referred_by": u.get("referred_by"),
        "referred_count": int(u.get("referred_count") or 0),
        "referred_paid_count": int(u.get("referred_paid_count") or 0),
    }

async def mark_referral_paid_if_first(buyer_id: int) -> tuple[bool, int, Optional[int]]:
    """
    –ó–∞—á–µ—Å—Ç—å –ø–ª–∞—Ç—ë–∂ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (LITE/PRO) –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É.
    –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ: –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å—á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω —Ä–∞–∑.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∑–∞—á–ª–∏_—Å–µ–π—á–∞—Å, –Ω–æ–≤–æ–µ_—á–∏—Å–ª–æ_–ø–ª–∞—Ç—è—â–∏—Ö_—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, referrer_id | None)
    """
    buyer = await users.find_one({"chat_id": buyer_id}, {"referred_by": 1})
    referrer_id = buyer.get("referred_by") if buyer else None
    if not referrer_id:
        return (False, 0, None)

    # –∞—Ç–æ–º–∞—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º buyer_id –≤ set –ø–ª–∞—Ç—è—â–∏—Ö
    res = await users.update_one(
        {"chat_id": referrer_id},
        {"$addToSet": {"referred_paid_ids": buyer_id}},
    )
    # –µ—Å–ª–∏ modified_count != 1 ‚Äî —ç—Ç–æ—Ç buyer —É–∂–µ –±—ã–ª –∑–∞—Å—á–∏—Ç–∞–Ω —Ä–∞–Ω–µ–µ
    if getattr(res, "modified_count", 0) != 1:
        doc = await users.find_one({"chat_id": referrer_id}, {"referred_paid_ids": 1})
        count = len(doc.get("referred_paid_ids") or [])
        return (False, count, referrer_id)

    # –ø–æ–¥–¥–µ—Ä–∂–∏–º —Å—á—ë—Ç—á–∏–∫
    await users.update_one({"chat_id": referrer_id}, {"$inc": {"referred_paid_count": 1}}, upsert=True)
    doc = await users.find_one({"chat_id": referrer_id}, {"referred_paid_count": 1})
    count = int(doc.get("referred_paid_count") or 0)
    return (True, count, referrer_id)

async def process_referral_reward_if_needed(buyer_id: int) -> tuple[bool, int, Optional[int]]:
    """
    –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –£–°–ü–ï–®–ù–û–ô –æ–ø–ª–∞—Ç—ã LITE/PRO.
    –ü—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –ø–ª–∞—Ç—è—â–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ —É –∏–Ω–≤–∞–π—Ç–µ—Ä–∞.
    –ù–∞ –∫–∞–∂–¥–æ–º –∫—Ä–∞—Ç–Ω–æ–º REF_REWARD_BATCH ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç PRO –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –Ω–∞ 1 –º–µ—Å—è—Ü.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤—ã–¥–∞–ª–∏_–Ω–∞–≥—Ä–∞–¥—É, —á–∏—Å–ª–æ_–ø–ª–∞—Ç—è—â–∏—Ö, referrer_id|None).
    """
    credited, paid_count, referrer_id = await mark_referral_paid_if_first(buyer_id)
    if not credited or not referrer_id:
        return (False, paid_count, referrer_id)

    # –∫–∞–∂–¥—ã–µ REF_REWARD_BATCH –ø–ª–∞—Ç—è—â–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äî +1 –º–µ—Å—è—Ü PRO
    if paid_count % REF_REWARD_BATCH == 0:
        await extend_pro_months(referrer_id, months=1)
        return (True, paid_count, referrer_id)
    return (False, paid_count, referrer_id)
